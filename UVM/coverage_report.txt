Coverage Report by file with details

=================================================================================
=== File: AES_Encrypt.v
=================================================================================
Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                    768       768         0    100.00

================================Toggle Details================================

Toggle Coverage for File AES_Encrypt.v --

       Line                                   Node      1H->0L      0L->1H  "Coverage"
--------------------------------------------------------------------------------------

Total Node Count     =        384 
Toggled Node Count   =        384 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (768 of 768 bins)

=================================================================================
=== File: addRoundKey.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            1         1         0    100.00

================================Statement Details================================

Statement Coverage for file addRoundKey.v --

    1                                                
    2                                                module addRoundKey(data, out, key);
    3                                                  
    4                                                  input [127:0] data;
    5                                                  input [127:0] key;
    6                                                  output [127:0] out;
    7                                                
    8               1                       7336       assign out = key ^ data;
    9                                                  
    10                                               endmodule


=================================================================================
=== File: design.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            6         6         0    100.00

================================Statement Details================================

Statement Coverage for file design.sv --

    1                                                `include "AES_Encrypt.v"
    2                                                
    3                                                module AES(
    4                                                    input logic clk,
    5                                                    input logic reset,
    6                                                    input logic valid_in,
    7                                                    input logic  [127:0] cipher_key,
    8                                                    input logic  [127:0] plain_text,
    9                                                    output logic [127:0] cipher_text,
    10                                                   output logic valid_out
    11                                                          );
    12                                               
    13                                               logic [127:0] cipher_text_out; // From Encrypt output
    14                                                
    15                                               AES_Encrypt AES_inst(.in (plain_text),.key (cipher_key),.out (cipher_text_out));
    16                                               
    17                                               
    18              1                        111     always @(posedge clk or negedge reset) begin
    19                                                 
    20                                                 if (!reset) begin
    21                                               
    22              1                         11           cipher_text <= 128'h0;
    23              1                         11           valid_out   <= 0;
    24                                                                
    25                                                 end else if (valid_in) begin
    26                                                
    27              1                         99           cipher_text <= cipher_text_out;
    28              1                         99           valid_out   <= 1;
    29                                                 end else begin 
    30              1                          1           valid_out   <= 0; 
    31                                                 end
    32                                               end
    33                                               endmodule

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         3         3         0    100.00

================================Branch Details================================

Branch Coverage for file design.sv --

------------------------------------IF Branch------------------------------------
    20                                       111     Count coming in to IF
    20              1                         11       if (!reset) begin
    25              1                         99       end else if (valid_in) begin
    29              1                          1       end else begin 
Branch totals: 3 hits of 3 branches = 100.00%


Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                    514       513         1     99.80

================================Toggle Details================================

Toggle Coverage for File design.sv --

       Line                                   Node      1H->0L      0L->1H  "Coverage"
--------------------------------------------------------------------------------------
         10                              valid_out           0           1       50.00 

Total Node Count     =        257 
Toggled Node Count   =        256 
Untoggled Node Count =          1 

Toggle Coverage      =      99.80% (513 of 514 bins)

=================================================================================
=== File: encryptRound.v
=================================================================================
Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                   1024       768       256     75.00

================================Toggle Details================================

Toggle Coverage for File encryptRound.v --

       Line                                   Node      1H->0L      0L->1H  "Coverage"
--------------------------------------------------------------------------------------
          9                    afterAddroundKey[9]           0           0        0.00 
          9                   afterAddroundKey[99]           0           0        0.00 
          9                   afterAddroundKey[98]           0           0        0.00 
          9                   afterAddroundKey[97]           0           0        0.00 
          9                   afterAddroundKey[96]           0           0        0.00 
          9                   afterAddroundKey[95]           0           0        0.00 
          9                   afterAddroundKey[94]           0           0        0.00 
          9                   afterAddroundKey[93]           0           0        0.00 
          9                   afterAddroundKey[92]           0           0        0.00 
          9                   afterAddroundKey[91]           0           0        0.00 
          9                   afterAddroundKey[90]           0           0        0.00 
          9                    afterAddroundKey[8]           0           0        0.00 
          9                   afterAddroundKey[89]           0           0        0.00 
          9                   afterAddroundKey[88]           0           0        0.00 
          9                   afterAddroundKey[87]           0           0        0.00 
          9                   afterAddroundKey[86]           0           0        0.00 
          9                   afterAddroundKey[85]           0           0        0.00 
          9                   afterAddroundKey[84]           0           0        0.00 
          9                   afterAddroundKey[83]           0           0        0.00 
          9                   afterAddroundKey[82]           0           0        0.00 
          9                   afterAddroundKey[81]           0           0        0.00 
          9                   afterAddroundKey[80]           0           0        0.00 
          9                    afterAddroundKey[7]           0           0        0.00 
          9                   afterAddroundKey[79]           0           0        0.00 
          9                   afterAddroundKey[78]           0           0        0.00 
          9                   afterAddroundKey[77]           0           0        0.00 
          9                   afterAddroundKey[76]           0           0        0.00 
          9                   afterAddroundKey[75]           0           0        0.00 
          9                   afterAddroundKey[74]           0           0        0.00 
          9                   afterAddroundKey[73]           0           0        0.00 
          9                   afterAddroundKey[72]           0           0        0.00 
          9                   afterAddroundKey[71]           0           0        0.00 
          9                   afterAddroundKey[70]           0           0        0.00 
          9                    afterAddroundKey[6]           0           0        0.00 
          9                   afterAddroundKey[69]           0           0        0.00 
          9                   afterAddroundKey[68]           0           0        0.00 
          9                   afterAddroundKey[67]           0           0        0.00 
          9                   afterAddroundKey[66]           0           0        0.00 
          9                   afterAddroundKey[65]           0           0        0.00 
          9                   afterAddroundKey[64]           0           0        0.00 
          9                   afterAddroundKey[63]           0           0        0.00 
          9                   afterAddroundKey[62]           0           0        0.00 
          9                   afterAddroundKey[61]           0           0        0.00 
          9                   afterAddroundKey[60]           0           0        0.00 
          9                    afterAddroundKey[5]           0           0        0.00 
          9                   afterAddroundKey[59]           0           0        0.00 
          9                   afterAddroundKey[58]           0           0        0.00 
          9                   afterAddroundKey[57]           0           0        0.00 
          9                   afterAddroundKey[56]           0           0        0.00 
          9                   afterAddroundKey[55]           0           0        0.00 
          9                   afterAddroundKey[54]           0           0        0.00 
          9                   afterAddroundKey[53]           0           0        0.00 
          9                   afterAddroundKey[52]           0           0        0.00 
          9                   afterAddroundKey[51]           0           0        0.00 
          9                   afterAddroundKey[50]           0           0        0.00 
          9                    afterAddroundKey[4]           0           0        0.00 
          9                   afterAddroundKey[49]           0           0        0.00 
          9                   afterAddroundKey[48]           0           0        0.00 
          9                   afterAddroundKey[47]           0           0        0.00 
          9                   afterAddroundKey[46]           0           0        0.00 
          9                   afterAddroundKey[45]           0           0        0.00 
          9                   afterAddroundKey[44]           0           0        0.00 
          9                   afterAddroundKey[43]           0           0        0.00 
          9                   afterAddroundKey[42]           0           0        0.00 
          9                   afterAddroundKey[41]           0           0        0.00 
          9                   afterAddroundKey[40]           0           0        0.00 
          9                    afterAddroundKey[3]           0           0        0.00 
          9                   afterAddroundKey[39]           0           0        0.00 
          9                   afterAddroundKey[38]           0           0        0.00 
          9                   afterAddroundKey[37]           0           0        0.00 
          9                   afterAddroundKey[36]           0           0        0.00 
          9                   afterAddroundKey[35]           0           0        0.00 
          9                   afterAddroundKey[34]           0           0        0.00 
          9                   afterAddroundKey[33]           0           0        0.00 
          9                   afterAddroundKey[32]           0           0        0.00 
          9                   afterAddroundKey[31]           0           0        0.00 
          9                   afterAddroundKey[30]           0           0        0.00 
          9                    afterAddroundKey[2]           0           0        0.00 
          9                   afterAddroundKey[29]           0           0        0.00 
          9                   afterAddroundKey[28]           0           0        0.00 
          9                   afterAddroundKey[27]           0           0        0.00 
          9                   afterAddroundKey[26]           0           0        0.00 
          9                   afterAddroundKey[25]           0           0        0.00 
          9                   afterAddroundKey[24]           0           0        0.00 
          9                   afterAddroundKey[23]           0           0        0.00 
          9                   afterAddroundKey[22]           0           0        0.00 
          9                   afterAddroundKey[21]           0           0        0.00 
          9                   afterAddroundKey[20]           0           0        0.00 
          9                    afterAddroundKey[1]           0           0        0.00 
          9                   afterAddroundKey[19]           0           0        0.00 
          9                   afterAddroundKey[18]           0           0        0.00 
          9                   afterAddroundKey[17]           0           0        0.00 
          9                   afterAddroundKey[16]           0           0        0.00 
          9                   afterAddroundKey[15]           0           0        0.00 
          9                   afterAddroundKey[14]           0           0        0.00 
          9                   afterAddroundKey[13]           0           0        0.00 
          9                   afterAddroundKey[12]           0           0        0.00 
          9                  afterAddroundKey[127]           0           0        0.00 
          9                  afterAddroundKey[126]           0           0        0.00 
          9                  afterAddroundKey[125]           0           0        0.00 
          9                  afterAddroundKey[124]           0           0        0.00 
          9                  afterAddroundKey[123]           0           0        0.00 
          9                  afterAddroundKey[122]           0           0        0.00 
          9                  afterAddroundKey[121]           0           0        0.00 
          9                  afterAddroundKey[120]           0           0        0.00 
          9                   afterAddroundKey[11]           0           0        0.00 
          9                  afterAddroundKey[119]           0           0        0.00 
          9                  afterAddroundKey[118]           0           0        0.00 
          9                  afterAddroundKey[117]           0           0        0.00 
          9                  afterAddroundKey[116]           0           0        0.00 
          9                  afterAddroundKey[115]           0           0        0.00 
          9                  afterAddroundKey[114]           0           0        0.00 
          9                  afterAddroundKey[113]           0           0        0.00 
          9                  afterAddroundKey[112]           0           0        0.00 
          9                  afterAddroundKey[111]           0           0        0.00 
          9                  afterAddroundKey[110]           0           0        0.00 
          9                   afterAddroundKey[10]           0           0        0.00 
          9                  afterAddroundKey[109]           0           0        0.00 
          9                  afterAddroundKey[108]           0           0        0.00 
          9                  afterAddroundKey[107]           0           0        0.00 
          9                  afterAddroundKey[106]           0           0        0.00 
          9                  afterAddroundKey[105]           0           0        0.00 
          9                  afterAddroundKey[104]           0           0        0.00 
          9                  afterAddroundKey[103]           0           0        0.00 
          9                  afterAddroundKey[102]           0           0        0.00 
          9                  afterAddroundKey[101]           0           0        0.00 
          9                  afterAddroundKey[100]           0           0        0.00 
          9                    afterAddroundKey[0]           0           0        0.00 

Total Node Count     =        512 
Toggled Node Count   =        384 
Untoggled Node Count =        128 

Toggle Coverage      =      75.00% (768 of 1024 bins)

=================================================================================
=== File: keyExpansion.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                          284       283         1     99.64

================================Statement Details================================

Statement Coverage for file keyExpansion.v --

    1                                                module keyExpansion #(parameter nk=4,parameter nr=10)(key,w);
    2                                                  // The first [(nk*32)-1 ]-bit key that we use to generate the rest of the keys of the other rounds.
    3                                                  // [(nk*32)-1 ] is the key length (128-bit key, 192-bit key or 256-bit key for nK=4,6 or 8 respectively).
    4                                                  input [0 : (nk * 32) - 1] key;  
    5                                                  // w represents the array that will store all the generated keys of all rounds.
    6                                                  /* [(128 * (nr + 1)) - 1] this formula is meant to calculate the length of W ; so that it can store all the
    7                                                  generated keys of all rounds.*/ 
    8                                                  output reg [0 : (128 * (nr + 1)) - 1] w;
    9                                                  reg [0:31] temp;
    10                                                 reg [0:31] r;
    11                                                 reg [0:31] rot; // It stores the returned value from the function rotword().
    12                                                 reg [0:31] x;	//It stores the returned value from the function subwordx().
    13                                                 reg [0:31] rconv; //It stores the returned value from the function rconx().
    14                                                 reg [0:31] new1;
    15                                               
    16                                                 integer i;
    17                                                 /*
    18                                                     We generate all the keys needed in the encryption and decryption at the beginning of the encryption or decryption
    19                                                  and store them, then we use them in the AES_Encrypt and AES_Decrypt modules as needed according to the current 
    20                                                  round.
    21                                                 */
    22                                                 /*
    23                                                  The functions:
    24                                                  1) subwordx() applies a table lookup to all to all four bytes of the sent word. subwordx() calls the function
    25                                                      c() four times, each time it sends to c() 1-byte to perform the table lookup on it.
    26                                                  2) rconx() contains the values given by [x^(i-1),{00},{00},{00}], with x^(i-1) being powers 
    27                                                      of x (x is denoted as {02}) in the field GF(28).
    28                                                  3) rotword() applies a cyclic shift of the bytes in a word. For example,{09cf4f3c} is changed into {cf4f3c09}
    29                                                      after applying this function.
    30                                                 */
    31                                               
    32                                                 /*
    33                                                         The pseudo-code of the this algorithm is found in the NIST.pdf attached to the repository with some modification
    34                                                     in the code to fit with verilog.
    35                                                 */
    36                                                 /*
    37                                                         For simplicity, We are going to explain the storing mechanism of the generated keys on an example of
    38                                                     128-bit key.It would be easy to apply the same concept on 192-bit and 256-bit keys. We would explain it in one 
    39                                                     round only. The next rounds would perform the same operations.
    40                                               
    41                                                     -The example:
    42                                                         -Note that in case of 128-bit key w[0:1407].
    43                                               
    44                                                         1) when w=key then w= {1279*{0}:key} where 1279*{0} means that the first 1279 bits are all zero valued
    45                                                             and the end of the w array contains the current 128-bit key.
    46                                                         2) when temp = w[(128 * (nr + 1) - 32) +: 32] then temp=w[1376 +:32] so temp in the first round would contain
    47                                                             the last 32-bit word of the the current key. 
    48                                                         3) After performing (temp = SubWord(RotWord(temp)) xor Rcon[i/Nk]) or (temp = SubWord(temp)), We would perform
    49                                                             (new = w[(128*(nr+1)-(nk*32))+:32] ^ temp) which is (new=w[1280+:32] ^ temp) in the first round,
    50                                                             where w[(128*(nr+1)-(nk*32))+:32] here is equivelent to w[i-Nk] in the pseudo-code. Now we have the new
    51                                                             generated key word (new) and we need to add it at the end of (W) array.
    52                                                         4) We would shift W by 32-bit to the left to empty space to the new generated key word.
    53                                                         5) w = {w[0 : (128 * (nr + 1) - 32) - 1], new} is w={w[0:1375],new} where w now contains w={1247*{0}:key:new} 
    54                                                             where 1247*{0} means that the first 1247 bits are all zero valued and they are followed by the original 
    55                                                             128-bit key, which are followed by the new generated 32-bit key.
    56                                                         6) Repeat this process for the rest of the rounds.At the end of all the rounds we would have all the W array
    57                                                             filled with all the keys.
    58                                               
    59                                                 */
    60              1                        110       always@* begin
    61                                                 //The first [(nk*32)-1 ]-bit key is stored in W.
    62              1                        110           w = key;    
    63              1                        110           for(i = nk; i < 4*(nr + 1); i = i + 1) begin
    63              2                       4400     
    64              1                       4400           temp = w[(128 * (nr + 1) - 32) +: 32];
    65                                                     if(i % nk == 0) begin
    66              1                       1100               rot = rotword(temp); // A call to the function rotword() is done and the returned value is stored in rot.
    67              1                       1100               x = subwordx (rot);	//A call to the function subwordx() is done and the returned value is stored in x.
    68              1                       1100               rconv = rconx (i/nk); //A call to the function rconx() is done and the returned value is stored in rconv.
    69              1                       1100               temp = x ^ rconv;   
    70                                                     end
    71                                                     else if(nk >6 && i % nk == 4) begin
    72                                                         temp = subwordx(temp);
    73                                                     end
    74              1                       4400           new1 = (w[(128*(nr+1)-(nk*32))+:32] ^ temp);
    75                                                     // We would shift W by 32 bit to the left to add the new generated key word (new) at its end.
    76              1                       4400           w = w << 32;
    77              1                       4400           w = {w[0 : (128 * (nr + 1) - 32) - 1], new1};
    78                                                 end
    79                                               
    80                                                 end
    81                                               
    82                                               
    83                                               
    84                                                 function [0:31] rotword;
    85                                                   input [0:31] x;
    86                                                   begin
    87              1                       1100                 rotword={x[8:31],x[0:7]};
    88                                                   end
    89                                                 endfunction
    90                                               
    91                                                 function [0:31] subwordx;
    92                                                   input [0:31] a;
    93                                                   begin
    94              1                       1100         subwordx[0:7]=c(a[0:7]);
    95              1                       1100         subwordx[8:15]=c(a[8:15]);
    96              1                       1100         subwordx[16:23]=c(a[16:23]);
    97              1                       1100         subwordx[24:31]=c(a[24:31]);
    98                                                   end
    99                                                 endfunction
    100                                              
    101                                                function [7:0] c(input [7:0] a);  
    102                                                begin
    103                                                    case (a)
    104             1                         15             8'h00: c=8'h63;
    105             1                         14              8'h01: c=8'h7c;
    106             1                          8              8'h02: c=8'h77;
    107             1                         14              8'h03: c=8'h7b;
    108             1                         20              8'h04: c=8'hf2;
    109             1                         12              8'h05: c=8'h6b;
    110             1                         19              8'h06: c=8'h6f;
    111             1                         21              8'h07: c=8'hc5;
    112             1                         13              8'h08: c=8'h30;
    113             1                         24              8'h09: c=8'h01;
    114             1                         19              8'h0a: c=8'h67;
    115             1                         18              8'h0b: c=8'h2b;
    116             1                         14              8'h0c: c=8'hfe;
    117             1                         26              8'h0d: c=8'hd7;
    118             1                         19              8'h0e: c=8'hab;
    119             1                         24              8'h0f: c=8'h76;
    120             1                         20              8'h10: c=8'hca;
    121             1                         22              8'h11: c=8'h82;
    122             1                         15              8'h12: c=8'hc9;
    123             1                         15              8'h13: c=8'h7d;
    124             1                         22              8'h14: c=8'hfa;
    125             1                         13              8'h15: c=8'h59;
    126             1                         25              8'h16: c=8'h47;
    127             1                         17              8'h17: c=8'hf0;
    128             1                         12              8'h18: c=8'had;
    129             1                         23              8'h19: c=8'hd4;
    130             1                         16              8'h1a: c=8'ha2;
    131             1                         13              8'h1b: c=8'haf;
    132             1                         19              8'h1c: c=8'h9c;
    133             1                         25              8'h1d: c=8'ha4;
    134             1                         15              8'h1e: c=8'h72;
    135             1                         17              8'h1f: c=8'hc0;
    136             1                         16              8'h20: c=8'hb7;
    137             1                         11              8'h21: c=8'hfd;
    138             1                         14              8'h22: c=8'h93;
    139             1                         19              8'h23: c=8'h26;
    140             1                         13              8'h24: c=8'h36;
    141             1                         18              8'h25: c=8'h3f;
    142             1                         11              8'h26: c=8'hf7;
    143             1                         14              8'h27: c=8'hcc;
    144             1                         17              8'h28: c=8'h34;
    145             1                         16              8'h29: c=8'ha5;
    146             1                         19              8'h2a: c=8'he5;
    147             1                         15              8'h2b: c=8'hf1;
    148             1                         22              8'h2c: c=8'h71;
    149             1                         17              8'h2d: c=8'hd8;
    150             1                         10              8'h2e: c=8'h31;
    151             1                         19              8'h2f: c=8'h15;
    152             1                         22              8'h30: c=8'h04;
    153             1                         16              8'h31: c=8'hc7;
    154             1                         16              8'h32: c=8'h23;
    155             1                         19              8'h33: c=8'hc3;
    156             1                         19              8'h34: c=8'h18;
    157             1                         19              8'h35: c=8'h96;
    158             1                         19              8'h36: c=8'h05;
    159             1                         28              8'h37: c=8'h9a;
    160             1                         16              8'h38: c=8'h07;
    161             1                         20              8'h39: c=8'h12;
    162             1                         20              8'h3a: c=8'h80;
    163             1                         13              8'h3b: c=8'he2;
    164             1                         21              8'h3c: c=8'heb;
    165             1                         19              8'h3d: c=8'h27;
    166             1                         18              8'h3e: c=8'hb2;
    167             1                         19              8'h3f: c=8'h75;
    168             1                         20              8'h40: c=8'h09;
    169             1                         19              8'h41: c=8'h83;
    170             1                         20              8'h42: c=8'h2c;
    171             1                         19              8'h43: c=8'h1a;
    172             1                         15              8'h44: c=8'h1b;
    173             1                         25              8'h45: c=8'h6e;
    174             1                         14              8'h46: c=8'h5a;
    175             1                         17              8'h47: c=8'ha0;
    176             1                         13              8'h48: c=8'h52;
    177             1                         17              8'h49: c=8'h3b;
    178             1                         21              8'h4a: c=8'hd6;
    179             1                         17              8'h4b: c=8'hb3;
    180             1                         20              8'h4c: c=8'h29;
    181             1                         16              8'h4d: c=8'he3;
    182             1                         27              8'h4e: c=8'h2f;
    183             1                         19              8'h4f: c=8'h84;
    184             1                         20              8'h50: c=8'h53;
    185             1                         16              8'h51: c=8'hd1;
    186             1                         22              8'h52: c=8'h00;
    187             1                         17              8'h53: c=8'hed;
    188             1                         18              8'h54: c=8'h20;
    189             1                          9              8'h55: c=8'hfc;
    190             1                         13              8'h56: c=8'hb1;
    191             1                         15              8'h57: c=8'h5b;
    192             1                         11              8'h58: c=8'h6a;
    193             1                         11              8'h59: c=8'hcb;
    194             1                         16              8'h5a: c=8'hbe;
    195             1                         22              8'h5b: c=8'h39;
    196             1                         12              8'h5c: c=8'h4a;
    197             1                         14              8'h5d: c=8'h4c;
    198             1                         14              8'h5e: c=8'h58;
    199             1                         15              8'h5f: c=8'hcf;
    200             1                         11              8'h60: c=8'hd0;
    201             1                         18              8'h61: c=8'hef;
    202             1                         20              8'h62: c=8'haa;
    203             1                         10              8'h63: c=8'hfb;
    204             1                         17              8'h64: c=8'h43;
    205             1                         16              8'h65: c=8'h4d;
    206             1                         13              8'h66: c=8'h33;
    207             1                         22              8'h67: c=8'h85;
    208             1                         16              8'h68: c=8'h45;
    209             1                         21              8'h69: c=8'hf9;
    210             1                         18              8'h6a: c=8'h02;
    211             1                         13              8'h6b: c=8'h7f;
    212             1                         19              8'h6c: c=8'h50;
    213             1                         10              8'h6d: c=8'h3c;
    214             1                          8              8'h6e: c=8'h9f;
    215             1                         29              8'h6f: c=8'ha8;
    216             1                         11              8'h70: c=8'h51;
    217             1                         19              8'h71: c=8'ha3;
    218             1                         13              8'h72: c=8'h40;
    219             1                         13              8'h73: c=8'h8f;
    220             1                         17              8'h74: c=8'h92;
    221             1                         26              8'h75: c=8'h9d;
    222             1                         14              8'h76: c=8'h38;
    223             1                         20              8'h77: c=8'hf5;
    224             1                         21              8'h78: c=8'hbc;
    225             1                         19              8'h79: c=8'hb6;
    226             1                         21              8'h7a: c=8'hda;
    227             1                         26              8'h7b: c=8'h21;
    228             1                         23              8'h7c: c=8'h10;
    229             1                         17              8'h7d: c=8'hff;
    230             1                         11              8'h7e: c=8'hf3;
    231             1                         19              8'h7f: c=8'hd2;
    232             1                         16              8'h80: c=8'hcd;
    233             1                         15              8'h81: c=8'h0c;
    234             1                         22              8'h82: c=8'h13;
    235             1                         14              8'h83: c=8'hec;
    236             1                         11              8'h84: c=8'h5f;
    237             1                         15              8'h85: c=8'h97;
    238             1                         24              8'h86: c=8'h44;
    239             1                         16              8'h87: c=8'h17;
    240             1                         18              8'h88: c=8'hc4;
    241             1                         14              8'h89: c=8'ha7;
    242             1                         22              8'h8a: c=8'h7e;
    243             1                         19              8'h8b: c=8'h3d;
    244             1                         18              8'h8c: c=8'h64;
    245             1                         22              8'h8d: c=8'h5d;
    246             1                         21              8'h8e: c=8'h19;
    247             1                         18              8'h8f: c=8'h73;
    248             1                         18              8'h90: c=8'h60;
    249             1                         14              8'h91: c=8'h81;
    250             1                         14              8'h92: c=8'h4f;
    251             1                         10              8'h93: c=8'hdc;
    252             1                         17              8'h94: c=8'h22;
    253             1                         14              8'h95: c=8'h2a;
    254             1                         14              8'h96: c=8'h90;
    255             1                         24              8'h97: c=8'h88;
    256             1                         22              8'h98: c=8'h46;
    257             1                         13              8'h99: c=8'hee;
    258             1                         13              8'h9a: c=8'hb8;
    259             1                         16              8'h9b: c=8'h14;
    260             1                         16              8'h9c: c=8'hde;
    261             1                         19              8'h9d: c=8'h5e;
    262             1                         11              8'h9e: c=8'h0b;
    263             1                         16              8'h9f: c=8'hdb;
    264             1                         13              8'ha0: c=8'he0;
    265             1                         18              8'ha1: c=8'h32;
    266             1                         18              8'ha2: c=8'h3a;
    267             1                         16              8'ha3: c=8'h0a;
    268             1                         12              8'ha4: c=8'h49;
    269             1                         24              8'ha5: c=8'h06;
    270             1                         22              8'ha6: c=8'h24;
    271             1                         15              8'ha7: c=8'h5c;
    272             1                         13              8'ha8: c=8'hc2;
    273             1                         16              8'ha9: c=8'hd3;
    274             1                         14              8'haa: c=8'hac;
    275             1                         17              8'hab: c=8'h62;
    276             1                         26              8'hac: c=8'h91;
    277             1                         16              8'had: c=8'h95;
    278             1                         18              8'hae: c=8'he4;
    279             1                         14              8'haf: c=8'h79;
    280             1                         18              8'hb0: c=8'he7;
    281             1                         11              8'hb1: c=8'hc8;
    282             1                         14              8'hb2: c=8'h37;
    283             1                         19              8'hb3: c=8'h6d;
    284             1                         16              8'hb4: c=8'h8d;
    285             1                         17              8'hb5: c=8'hd5;
    286             1                         13              8'hb6: c=8'h4e;
    287             1                         16              8'hb7: c=8'ha9;
    288             1                         23              8'hb8: c=8'h6c;
    289             1                         19              8'hb9: c=8'h56;
    290             1                         16              8'hba: c=8'hf4;
    291             1                         18              8'hbb: c=8'hea;
    292             1                         18              8'hbc: c=8'h65;
    293             1                         12              8'hbd: c=8'h7a;
    294             1                         19              8'hbe: c=8'hae;
    295             1                          9              8'hbf: c=8'h08;
    296             1                         21              8'hc0: c=8'hba;
    297             1                         13              8'hc1: c=8'h78;
    298             1                         14              8'hc2: c=8'h25;
    299             1                         13              8'hc3: c=8'h2e;
    300             1                         13              8'hc4: c=8'h1c;
    301             1                         13              8'hc5: c=8'ha6;
    302             1                         22              8'hc6: c=8'hb4;
    303             1                         17              8'hc7: c=8'hc6;
    304             1                         19              8'hc8: c=8'he8;
    305             1                         20              8'hc9: c=8'hdd;
    306             1                         15              8'hca: c=8'h74;
    307             1                         17              8'hcb: c=8'h1f;
    308             1                         16              8'hcc: c=8'h4b;
    309             1                         13              8'hcd: c=8'hbd;
    310             1                         13              8'hce: c=8'h8b;
    311             1                         23              8'hcf: c=8'h8a;
    312             1                         18              8'hd0: c=8'h70;
    313             1                         20              8'hd1: c=8'h3e;
    314             1                         19              8'hd2: c=8'hb5;
    315             1                         17              8'hd3: c=8'h66;
    316             1                         27              8'hd4: c=8'h48;
    317             1                         15              8'hd5: c=8'h03;
    318             1                         16              8'hd6: c=8'hf6;
    319             1                         19              8'hd7: c=8'h0e;
    320             1                         24              8'hd8: c=8'h61;
    321             1                         21              8'hd9: c=8'h35;
    322             1                         16              8'hda: c=8'h57;
    323             1                         13              8'hdb: c=8'hb9;
    324             1                         16              8'hdc: c=8'h86;
    325             1                         15              8'hdd: c=8'hc1;
    326             1                         22              8'hde: c=8'h1d;
    327             1                         13              8'hdf: c=8'h9e;
    328             1                         20              8'he0: c=8'he1;
    329             1                         23              8'he1: c=8'hf8;
    330             1                         17              8'he2: c=8'h98;
    331             1                         22              8'he3: c=8'h11;
    332             1                         15              8'he4: c=8'h69;
    333             1                         14              8'he5: c=8'hd9;
    334             1                         14              8'he6: c=8'h8e;
    335             1                         18              8'he7: c=8'h94;
    336             1                         15              8'he8: c=8'h9b;
    337             1                          8              8'he9: c=8'h1e;
    338             1                         15              8'hea: c=8'h87;
    339             1                         18              8'heb: c=8'he9;
    340             1                         17              8'hec: c=8'hce;
    341             1                         19              8'hed: c=8'h55;
    342             1                         23              8'hee: c=8'h28;
    343             1                         22              8'hef: c=8'hdf;
    344             1                         14              8'hf0: c=8'h8c;
    345             1                         20              8'hf1: c=8'ha1;
    346             1                         26              8'hf2: c=8'h89;
    347             1                         14              8'hf3: c=8'h0d;
    348             1                         21              8'hf4: c=8'hbf;
    349             1                         22              8'hf5: c=8'he6;
    350             1                         13              8'hf6: c=8'h42;
    351             1                         16              8'hf7: c=8'h68;
    352             1                         16              8'hf8: c=8'h41;
    353             1                         16              8'hf9: c=8'h99;
    354             1                         14              8'hfa: c=8'h2d;
    355             1                         19              8'hfb: c=8'h0f;
    356             1                         13              8'hfc: c=8'hb0;
    357             1                         26              8'hfd: c=8'h54;
    358             1                         17              8'hfe: c=8'hbb;
    359             1                         15              8'hff: c=8'h16;
    360                                                    endcase
    361                                                end
    362                                                endfunction
    363                                              
    364                                              
    365                                                function[0:31] rconx;
    366                                                  input [0:31] r; 
    367                                                  begin
    368                                                    case(r)
    369             1                        110             4'h1: rconx=32'h01000000;
    370             1                        110             4'h2: rconx=32'h02000000;
    371             1                        110             4'h3: rconx=32'h04000000;
    372             1                        110             4'h4: rconx=32'h08000000;
    373             1                        110             4'h5: rconx=32'h10000000;
    374             1                        110             4'h6: rconx=32'h20000000;
    375             1                        110             4'h7: rconx=32'h40000000;
    376             1                        110             4'h8: rconx=32'h80000000;
    377             1                        110             4'h9: rconx=32'h1b000000;
    378             1                        110             4'ha: rconx=32'h36000000;
    379             1                    ***0***             default: rconx=32'h00000000;
    380                                                    endcase
    381                                                  end
    382                                                endfunction
    383                                              
    384                                              endmodule

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                       270       268         2     99.25

================================Branch Details================================

Branch Coverage for file keyExpansion.v --

------------------------------------IF Branch------------------------------------
    65                                      4400     Count coming in to IF
    65              1                       1100           if(i % nk == 0) begin
    71              1                       3300           else if(nk >6 && i % nk == 4) begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    103                                     4400     Count coming in to CASE
    104             1                         15             8'h00: c=8'h63;
    105             1                         14              8'h01: c=8'h7c;
    106             1                          8              8'h02: c=8'h77;
    107             1                         14              8'h03: c=8'h7b;
    108             1                         20              8'h04: c=8'hf2;
    109             1                         12              8'h05: c=8'h6b;
    110             1                         19              8'h06: c=8'h6f;
    111             1                         21              8'h07: c=8'hc5;
    112             1                         13              8'h08: c=8'h30;
    113             1                         24              8'h09: c=8'h01;
    114             1                         19              8'h0a: c=8'h67;
    115             1                         18              8'h0b: c=8'h2b;
    116             1                         14              8'h0c: c=8'hfe;
    117             1                         26              8'h0d: c=8'hd7;
    118             1                         19              8'h0e: c=8'hab;
    119             1                         24              8'h0f: c=8'h76;
    120             1                         20              8'h10: c=8'hca;
    121             1                         22              8'h11: c=8'h82;
    122             1                         15              8'h12: c=8'hc9;
    123             1                         15              8'h13: c=8'h7d;
    124             1                         22              8'h14: c=8'hfa;
    125             1                         13              8'h15: c=8'h59;
    126             1                         25              8'h16: c=8'h47;
    127             1                         17              8'h17: c=8'hf0;
    128             1                         12              8'h18: c=8'had;
    129             1                         23              8'h19: c=8'hd4;
    130             1                         16              8'h1a: c=8'ha2;
    131             1                         13              8'h1b: c=8'haf;
    132             1                         19              8'h1c: c=8'h9c;
    133             1                         25              8'h1d: c=8'ha4;
    134             1                         15              8'h1e: c=8'h72;
    135             1                         17              8'h1f: c=8'hc0;
    136             1                         16              8'h20: c=8'hb7;
    137             1                         11              8'h21: c=8'hfd;
    138             1                         14              8'h22: c=8'h93;
    139             1                         19              8'h23: c=8'h26;
    140             1                         13              8'h24: c=8'h36;
    141             1                         18              8'h25: c=8'h3f;
    142             1                         11              8'h26: c=8'hf7;
    143             1                         14              8'h27: c=8'hcc;
    144             1                         17              8'h28: c=8'h34;
    145             1                         16              8'h29: c=8'ha5;
    146             1                         19              8'h2a: c=8'he5;
    147             1                         15              8'h2b: c=8'hf1;
    148             1                         22              8'h2c: c=8'h71;
    149             1                         17              8'h2d: c=8'hd8;
    150             1                         10              8'h2e: c=8'h31;
    151             1                         19              8'h2f: c=8'h15;
    152             1                         22              8'h30: c=8'h04;
    153             1                         16              8'h31: c=8'hc7;
    154             1                         16              8'h32: c=8'h23;
    155             1                         19              8'h33: c=8'hc3;
    156             1                         19              8'h34: c=8'h18;
    157             1                         19              8'h35: c=8'h96;
    158             1                         19              8'h36: c=8'h05;
    159             1                         28              8'h37: c=8'h9a;
    160             1                         16              8'h38: c=8'h07;
    161             1                         20              8'h39: c=8'h12;
    162             1                         20              8'h3a: c=8'h80;
    163             1                         13              8'h3b: c=8'he2;
    164             1                         21              8'h3c: c=8'heb;
    165             1                         19              8'h3d: c=8'h27;
    166             1                         18              8'h3e: c=8'hb2;
    167             1                         19              8'h3f: c=8'h75;
    168             1                         20              8'h40: c=8'h09;
    169             1                         19              8'h41: c=8'h83;
    170             1                         20              8'h42: c=8'h2c;
    171             1                         19              8'h43: c=8'h1a;
    172             1                         15              8'h44: c=8'h1b;
    173             1                         25              8'h45: c=8'h6e;
    174             1                         14              8'h46: c=8'h5a;
    175             1                         17              8'h47: c=8'ha0;
    176             1                         13              8'h48: c=8'h52;
    177             1                         17              8'h49: c=8'h3b;
    178             1                         21              8'h4a: c=8'hd6;
    179             1                         17              8'h4b: c=8'hb3;
    180             1                         20              8'h4c: c=8'h29;
    181             1                         16              8'h4d: c=8'he3;
    182             1                         27              8'h4e: c=8'h2f;
    183             1                         19              8'h4f: c=8'h84;
    184             1                         20              8'h50: c=8'h53;
    185             1                         16              8'h51: c=8'hd1;
    186             1                         22              8'h52: c=8'h00;
    187             1                         17              8'h53: c=8'hed;
    188             1                         18              8'h54: c=8'h20;
    189             1                          9              8'h55: c=8'hfc;
    190             1                         13              8'h56: c=8'hb1;
    191             1                         15              8'h57: c=8'h5b;
    192             1                         11              8'h58: c=8'h6a;
    193             1                         11              8'h59: c=8'hcb;
    194             1                         16              8'h5a: c=8'hbe;
    195             1                         22              8'h5b: c=8'h39;
    196             1                         12              8'h5c: c=8'h4a;
    197             1                         14              8'h5d: c=8'h4c;
    198             1                         14              8'h5e: c=8'h58;
    199             1                         15              8'h5f: c=8'hcf;
    200             1                         11              8'h60: c=8'hd0;
    201             1                         18              8'h61: c=8'hef;
    202             1                         20              8'h62: c=8'haa;
    203             1                         10              8'h63: c=8'hfb;
    204             1                         17              8'h64: c=8'h43;
    205             1                         16              8'h65: c=8'h4d;
    206             1                         13              8'h66: c=8'h33;
    207             1                         22              8'h67: c=8'h85;
    208             1                         16              8'h68: c=8'h45;
    209             1                         21              8'h69: c=8'hf9;
    210             1                         18              8'h6a: c=8'h02;
    211             1                         13              8'h6b: c=8'h7f;
    212             1                         19              8'h6c: c=8'h50;
    213             1                         10              8'h6d: c=8'h3c;
    214             1                          8              8'h6e: c=8'h9f;
    215             1                         29              8'h6f: c=8'ha8;
    216             1                         11              8'h70: c=8'h51;
    217             1                         19              8'h71: c=8'ha3;
    218             1                         13              8'h72: c=8'h40;
    219             1                         13              8'h73: c=8'h8f;
    220             1                         17              8'h74: c=8'h92;
    221             1                         26              8'h75: c=8'h9d;
    222             1                         14              8'h76: c=8'h38;
    223             1                         20              8'h77: c=8'hf5;
    224             1                         21              8'h78: c=8'hbc;
    225             1                         19              8'h79: c=8'hb6;
    226             1                         21              8'h7a: c=8'hda;
    227             1                         26              8'h7b: c=8'h21;
    228             1                         23              8'h7c: c=8'h10;
    229             1                         17              8'h7d: c=8'hff;
    230             1                         11              8'h7e: c=8'hf3;
    231             1                         19              8'h7f: c=8'hd2;
    232             1                         16              8'h80: c=8'hcd;
    233             1                         15              8'h81: c=8'h0c;
    234             1                         22              8'h82: c=8'h13;
    235             1                         14              8'h83: c=8'hec;
    236             1                         11              8'h84: c=8'h5f;
    237             1                         15              8'h85: c=8'h97;
    238             1                         24              8'h86: c=8'h44;
    239             1                         16              8'h87: c=8'h17;
    240             1                         18              8'h88: c=8'hc4;
    241             1                         14              8'h89: c=8'ha7;
    242             1                         22              8'h8a: c=8'h7e;
    243             1                         19              8'h8b: c=8'h3d;
    244             1                         18              8'h8c: c=8'h64;
    245             1                         22              8'h8d: c=8'h5d;
    246             1                         21              8'h8e: c=8'h19;
    247             1                         18              8'h8f: c=8'h73;
    248             1                         18              8'h90: c=8'h60;
    249             1                         14              8'h91: c=8'h81;
    250             1                         14              8'h92: c=8'h4f;
    251             1                         10              8'h93: c=8'hdc;
    252             1                         17              8'h94: c=8'h22;
    253             1                         14              8'h95: c=8'h2a;
    254             1                         14              8'h96: c=8'h90;
    255             1                         24              8'h97: c=8'h88;
    256             1                         22              8'h98: c=8'h46;
    257             1                         13              8'h99: c=8'hee;
    258             1                         13              8'h9a: c=8'hb8;
    259             1                         16              8'h9b: c=8'h14;
    260             1                         16              8'h9c: c=8'hde;
    261             1                         19              8'h9d: c=8'h5e;
    262             1                         11              8'h9e: c=8'h0b;
    263             1                         16              8'h9f: c=8'hdb;
    264             1                         13              8'ha0: c=8'he0;
    265             1                         18              8'ha1: c=8'h32;
    266             1                         18              8'ha2: c=8'h3a;
    267             1                         16              8'ha3: c=8'h0a;
    268             1                         12              8'ha4: c=8'h49;
    269             1                         24              8'ha5: c=8'h06;
    270             1                         22              8'ha6: c=8'h24;
    271             1                         15              8'ha7: c=8'h5c;
    272             1                         13              8'ha8: c=8'hc2;
    273             1                         16              8'ha9: c=8'hd3;
    274             1                         14              8'haa: c=8'hac;
    275             1                         17              8'hab: c=8'h62;
    276             1                         26              8'hac: c=8'h91;
    277             1                         16              8'had: c=8'h95;
    278             1                         18              8'hae: c=8'he4;
    279             1                         14              8'haf: c=8'h79;
    280             1                         18              8'hb0: c=8'he7;
    281             1                         11              8'hb1: c=8'hc8;
    282             1                         14              8'hb2: c=8'h37;
    283             1                         19              8'hb3: c=8'h6d;
    284             1                         16              8'hb4: c=8'h8d;
    285             1                         17              8'hb5: c=8'hd5;
    286             1                         13              8'hb6: c=8'h4e;
    287             1                         16              8'hb7: c=8'ha9;
    288             1                         23              8'hb8: c=8'h6c;
    289             1                         19              8'hb9: c=8'h56;
    290             1                         16              8'hba: c=8'hf4;
    291             1                         18              8'hbb: c=8'hea;
    292             1                         18              8'hbc: c=8'h65;
    293             1                         12              8'hbd: c=8'h7a;
    294             1                         19              8'hbe: c=8'hae;
    295             1                          9              8'hbf: c=8'h08;
    296             1                         21              8'hc0: c=8'hba;
    297             1                         13              8'hc1: c=8'h78;
    298             1                         14              8'hc2: c=8'h25;
    299             1                         13              8'hc3: c=8'h2e;
    300             1                         13              8'hc4: c=8'h1c;
    301             1                         13              8'hc5: c=8'ha6;
    302             1                         22              8'hc6: c=8'hb4;
    303             1                         17              8'hc7: c=8'hc6;
    304             1                         19              8'hc8: c=8'he8;
    305             1                         20              8'hc9: c=8'hdd;
    306             1                         15              8'hca: c=8'h74;
    307             1                         17              8'hcb: c=8'h1f;
    308             1                         16              8'hcc: c=8'h4b;
    309             1                         13              8'hcd: c=8'hbd;
    310             1                         13              8'hce: c=8'h8b;
    311             1                         23              8'hcf: c=8'h8a;
    312             1                         18              8'hd0: c=8'h70;
    313             1                         20              8'hd1: c=8'h3e;
    314             1                         19              8'hd2: c=8'hb5;
    315             1                         17              8'hd3: c=8'h66;
    316             1                         27              8'hd4: c=8'h48;
    317             1                         15              8'hd5: c=8'h03;
    318             1                         16              8'hd6: c=8'hf6;
    319             1                         19              8'hd7: c=8'h0e;
    320             1                         24              8'hd8: c=8'h61;
    321             1                         21              8'hd9: c=8'h35;
    322             1                         16              8'hda: c=8'h57;
    323             1                         13              8'hdb: c=8'hb9;
    324             1                         16              8'hdc: c=8'h86;
    325             1                         15              8'hdd: c=8'hc1;
    326             1                         22              8'hde: c=8'h1d;
    327             1                         13              8'hdf: c=8'h9e;
    328             1                         20              8'he0: c=8'he1;
    329             1                         23              8'he1: c=8'hf8;
    330             1                         17              8'he2: c=8'h98;
    331             1                         22              8'he3: c=8'h11;
    332             1                         15              8'he4: c=8'h69;
    333             1                         14              8'he5: c=8'hd9;
    334             1                         14              8'he6: c=8'h8e;
    335             1                         18              8'he7: c=8'h94;
    336             1                         15              8'he8: c=8'h9b;
    337             1                          8              8'he9: c=8'h1e;
    338             1                         15              8'hea: c=8'h87;
    339             1                         18              8'heb: c=8'he9;
    340             1                         17              8'hec: c=8'hce;
    341             1                         19              8'hed: c=8'h55;
    342             1                         23              8'hee: c=8'h28;
    343             1                         22              8'hef: c=8'hdf;
    344             1                         14              8'hf0: c=8'h8c;
    345             1                         20              8'hf1: c=8'ha1;
    346             1                         26              8'hf2: c=8'h89;
    347             1                         14              8'hf3: c=8'h0d;
    348             1                         21              8'hf4: c=8'hbf;
    349             1                         22              8'hf5: c=8'he6;
    350             1                         13              8'hf6: c=8'h42;
    351             1                         16              8'hf7: c=8'h68;
    352             1                         16              8'hf8: c=8'h41;
    353             1                         16              8'hf9: c=8'h99;
    354             1                         14              8'hfa: c=8'h2d;
    355             1                         19              8'hfb: c=8'h0f;
    356             1                         13              8'hfc: c=8'hb0;
    357             1                         26              8'hfd: c=8'h54;
    358             1                         17              8'hfe: c=8'hbb;
    359             1                         15              8'hff: c=8'h16;
                                         ***0***     All False Count
Branch totals: 256 hits of 257 branches = 99.61%

------------------------------------CASE Branch------------------------------------
    368                                     1100     Count coming in to CASE
    369             1                        110             4'h1: rconx=32'h01000000;
    370             1                        110             4'h2: rconx=32'h02000000;
    371             1                        110             4'h3: rconx=32'h04000000;
    372             1                        110             4'h4: rconx=32'h08000000;
    373             1                        110             4'h5: rconx=32'h10000000;
    374             1                        110             4'h6: rconx=32'h20000000;
    375             1                        110             4'h7: rconx=32'h40000000;
    376             1                        110             4'h8: rconx=32'h80000000;
    377             1                        110             4'h9: rconx=32'h1b000000;
    378             1                        110             4'ha: rconx=32'h36000000;
    379             1                    ***0***             default: rconx=32'h00000000;
Branch totals: 10 hits of 11 branches = 90.90%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              1         1         0    100.00

================================Condition Details================================

Condition Coverage for file keyExpansion.v --

----------------Focused Condition View-------------------
Line       65 Item    1  ((i % 4) == 0)
Condition totals: 1 of 1 input term covered = 100.00%


Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                    384       256       128     66.66

================================Toggle Details================================

Toggle Coverage for File keyExpansion.v --

       Line                                   Node      1H->0L      0L->1H  "Coverage"
--------------------------------------------------------------------------------------
         13                               rconv[9]           0           0        0.00 
         13                               rconv[8]           0           0        0.00 
         13                               rconv[7]           0           0        0.00 
         13                               rconv[6]           0           0        0.00 
         13                               rconv[5]           0           0        0.00 
         13                               rconv[4]           0           0        0.00 
         13                               rconv[3]           0           0        0.00 
         13                              rconv[31]           0           0        0.00 
         13                              rconv[30]           0           0        0.00 
         13                               rconv[2]           0           0        0.00 
         13                              rconv[29]           0           0        0.00 
         13                              rconv[28]           0           0        0.00 
         13                              rconv[27]           0           0        0.00 
         13                              rconv[26]           0           0        0.00 
         13                              rconv[25]           0           0        0.00 
         13                              rconv[24]           0           0        0.00 
         13                              rconv[23]           0           0        0.00 
         13                              rconv[22]           0           0        0.00 
         13                              rconv[21]           0           0        0.00 
         13                              rconv[20]           0           0        0.00 
         13                               rconv[1]           0           0        0.00 
         13                              rconv[19]           0           0        0.00 
         13                              rconv[18]           0           0        0.00 
         13                              rconv[17]           0           0        0.00 
         13                              rconv[16]           0           0        0.00 
         13                              rconv[15]           0           0        0.00 
         13                              rconv[14]           0           0        0.00 
         13                              rconv[13]           0           0        0.00 
         13                              rconv[12]           0           0        0.00 
         13                              rconv[11]           0           0        0.00 
         13                              rconv[10]           0           0        0.00 
         13                               rconv[0]           0           0        0.00 
         16                                   i[9]           0           0        0.00 
         16                                   i[8]           0           0        0.00 
         16                                   i[7]           0           0        0.00 
         16                                   i[6]           0           0        0.00 
         16                                   i[5]           0           0        0.00 
         16                                   i[4]           0           0        0.00 
         16                                   i[3]           0           0        0.00 
         16                                  i[31]           0           0        0.00 
         16                                  i[30]           0           0        0.00 
         16                                   i[2]           0           0        0.00 
         16                                  i[29]           0           0        0.00 
         16                                  i[28]           0           0        0.00 
         16                                  i[27]           0           0        0.00 
         16                                  i[26]           0           0        0.00 
         16                                  i[25]           0           0        0.00 
         16                                  i[24]           0           0        0.00 
         16                                  i[23]           0           0        0.00 
         16                                  i[22]           0           0        0.00 
         16                                  i[21]           0           0        0.00 
         16                                  i[20]           0           0        0.00 
         16                                   i[1]           0           0        0.00 
         16                                  i[19]           0           0        0.00 
         16                                  i[18]           0           0        0.00 
         16                                  i[17]           0           0        0.00 
         16                                  i[16]           0           0        0.00 
         16                                  i[15]           0           0        0.00 
         16                                  i[14]           0           0        0.00 
         16                                  i[13]           0           0        0.00 
         16                                  i[12]           0           0        0.00 
         16                                  i[11]           0           0        0.00 
         16                                  i[10]           0           0        0.00 
         16                                   i[0]           0           0        0.00 

Total Node Count     =        192 
Toggled Node Count   =        128 
Untoggled Node Count =         64 

Toggle Coverage      =      66.66% (256 of 384 bins)

=================================================================================
=== File: mixColumns.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            7         7         0    100.00

================================Statement Details================================

Statement Coverage for file mixColumns.v --

    1                                                
    2                                                module mixColumns(state_in,state_out);
    3                                                
    4                                                  input [127:0] state_in;
    5                                                  output[127:0] state_out;
    6                                                
    7                                                
    8                                                  function [7:0] mb2; //multiply by 2
    9                                                      input [7:0] x;
    10                                                     begin 
    11                                                             /* multiplication by 2 is shifting on bit to the left, and if the original 8 bits had a 1 @ MSB,
    12                                                             xor the result with {1b}*/
    13              1                      80356                   if(x[7] == 1) mb2 = ((x << 1) ^ 8'h1b);
    14              1                      80668                   else mb2 = x << 1; 
    15                                                     end 	
    16                                                 endfunction
    17                                               
    18                                               
    19                                                 /* 
    20                                                     multiplication by 3 is done by:
    21                                                         multiplication by {02} xor(the original x)
    22                                                         so that 2+1=3. where xor is the addition of elements in finite fields
    23                                                 */
    24                                                 function [7:0] mb3; //multiply by 3
    25                                                     input [7:0] x;
    26                                                     begin 
    27                                               
    28              1                      80512                   mb3 = mb2(x) ^ x;
    29                                                     end 
    30                                                 endfunction
    31                                               
    32                                               
    33                                               
    34                                               
    35                                                 genvar i;
    36                                               
    37                                                 generate 
    38                                                   for(i=0;i< 4;i=i+1) begin : m_col
    39                                               
    40              1                      20128             assign state_out[(i*32 + 24)+:8]= mb2(state_in[(i*32 + 24)+:8]) ^ mb3(state_in[(i*32 + 16)+:8]) ^ state_in[(i*32 + 8)+:8] ^ state_in[i*32+:8];
    41              1                      20128             assign state_out[(i*32 + 16)+:8]= state_in[(i*32 + 24)+:8] ^ mb2(state_in[(i*32 + 16)+:8]) ^ mb3(state_in[(i*32 + 8)+:8]) ^ state_in[i*32+:8];
    42              1                      20128             assign state_out[(i*32 + 8)+:8]= state_in[(i*32 + 24)+:8] ^ state_in[(i*32 + 16)+:8] ^ mb2(state_in[(i*32 + 8)+:8]) ^ mb3(state_in[i*32+:8]);
    43              1                      20128            assign state_out[i*32+:8]= mb3(state_in[(i*32 + 24)+:8]) ^ state_in[(i*32 + 16)+:8] ^ state_in[(i*32 + 8)+:8] ^ mb2(state_in[i*32+:8]);
    44                                               
    45                                                   end
    46                                               
    47                                                 endgenerate
    48                                               
    49                                               endmodule

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         2         2         0    100.00

================================Branch Details================================

Branch Coverage for file mixColumns.v --

------------------------------------IF Branch------------------------------------
    13                                    161024     Count coming in to IF
    13              1                      80356                   if(x[7] == 1) mb2 = ((x << 1) ^ 8'h1b);
    14              1                      80668                   else mb2 = x << 1; 
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              1         1         0    100.00

================================Condition Details================================

Condition Coverage for file mixColumns.v --

----------------Focused Condition View-------------------
Line       13 Item    1  (x[7] == 1)
Condition totals: 1 of 1 input term covered = 100.00%



=================================================================================
=== File: my_agent.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           16        12         4     75.00

================================Statement Details================================

Statement Coverage for file my_agent.sv --

    1                                                
    2                                                class my_agent extends uvm_agent;
    3               1                    ***0***       `uvm_component_utils(my_agent)
    3               2                    ***0***     
    3               3                    ***0***     
    4                                                   my_driver driver;
    5                                                   my_monitor monitor;
    6                                                   my_sequencer sequencer;
    7                                                   uvm_analysis_port#(my_sequence_item) my_analysis_port; /// 1 inst port without call write fn
    8                                                   virtual intf my_vif;
    9                                                  
    10                                                 function new(string name = "my_agent", uvm_component parent);
    11              1                          1       super.new(name, parent);
    12                                                 endfunction
    13                                                 
    14                                                 function void build_phase(uvm_phase phase);
    15              1                          1       super.build_phase(phase);
    16                                                   // Create the drv//mon//seqr
    17              1                          1         driver    = my_driver   ::type_id::create("driver",    this);
    18              1                          1         monitor   = my_monitor  ::type_id::create("monitor",   this);
    19              1                          1         sequencer = my_sequencer::type_id::create("sequencer", this);
    20                                                   
    21                                                   // vertuil interface get and set in drv and mon
    22                                                   if(!uvm_config_db#(virtual intf)::get(this, "", "my_vif", my_vif))
    23              1                    ***0***           `uvm_fatal(get_full_name(), "Error")
    24                                               
    25              1                          1           uvm_config_db#(virtual intf)::set(this, "driver"  , "my_vif" , my_vif);
    26              1                          1           uvm_config_db#(virtual intf)::set(this, "monitor" , "my_vif" , my_vif);
    27                                               
    28                                                   // create port 
    29              1                          1         my_analysis_port = new("my_analysis_port", this);
    30                                                  
    31                                                 endfunction
    32                                                 
    33                                                 function void connect_phase(uvm_phase phase);
    34              1                          1       super.connect_phase(phase);
    35                                               
    36              1                          1         monitor.my_analysis_port.connect(my_analysis_port);
    37                                                   // connect drv and seqr 
    38              1                          1         driver.seq_item_port.connect(sequencer.seq_item_export);
    39                                                   
    40                                                 endfunction
    41                                                 task run_phase(uvm_phase phase);
    42              1                          1       super.run_phase(phase);
    43                                                   
    44                                                 endtask
    45                                                
    46                                               endclass

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         4         1         3     25.00

================================Branch Details================================

Branch Coverage for file my_agent.sv --

------------------------------------IF Branch------------------------------------
    22                                         1     Count coming in to IF
    22              1                    ***0***         if(!uvm_config_db#(virtual intf)::get(this, "", "my_vif", my_vif))
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    23                                   ***0***     Count coming in to IF
    23              1                    ***0***           `uvm_fatal(get_full_name(), "Error")
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%



=================================================================================
=== File: my_driver.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           15        11         4     73.33

================================Statement Details================================

Statement Coverage for file my_driver.sv --

    1                                                
    2                                                class my_driver extends uvm_driver#(my_sequence_item);
    3               1                    ***0***       `uvm_component_utils(my_driver)
    3               2                    ***0***     
    3               3                    ***0***     
    4                                                  
    5                                                   my_sequence_item seq_item;
    6                                                   virtual intf my_vif;
    7                                                  
    8                                                  function new(string name = "my_driver", uvm_component parent = null);
    9               1                          1       super.new(name, parent);
    10                                                 endfunction
    11                                                 
    12                                                 function void build_phase(uvm_phase phase);
    13              1                          1       super.build_phase(phase);
    14                                               
    15                                                  if(!uvm_config_db#(virtual intf)::get(this, "", "my_vif", my_vif))
    16              1                    ***0***           `uvm_fatal(get_full_name(), "Error")
    17                                                      
    18                                                 endfunction
    19                                               
    20                                                 task run_phase(uvm_phase phase);
    21              1                          1       super.run_phase(phase);
    22                                               
    23              1                          1         forever begin
    24              1                        111           seq_item_port.get_next_item(seq_item);
    25                                               
    26              1                        110           @(negedge my_vif.clk);
    27                                                 
    28              1                        110           my_vif.cipher_key <= seq_item.cipher_key; 
    29              1                        110           my_vif.plain_text <= seq_item.plain_text;
    30              1                        110           my_vif.valid_in   <= seq_item.valid_in;
    31              1                        110           my_vif.reset      <= seq_item.reset;
    32                                               
    33              1                        110           seq_item_port.item_done();
    34                                                   
    35                                                   end
    36                                                 endtask
    37                                                 
    38                                               endclass

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         4         1         3     25.00

================================Branch Details================================

Branch Coverage for file my_driver.sv --

------------------------------------IF Branch------------------------------------
    15                                         1     Count coming in to IF
    15              1                    ***0***        if(!uvm_config_db#(virtual intf)::get(this, "", "my_vif", my_vif))
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    16                                   ***0***     Count coming in to IF
    16              1                    ***0***           `uvm_fatal(get_full_name(), "Error")
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%



=================================================================================
=== File: my_env.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           13         9         4     69.23

================================Statement Details================================

Statement Coverage for file my_env.sv --

    1                                                
    2                                                class my_env extends uvm_env;
    3               1                    ***0***       `uvm_component_utils(my_env)
    3               2                    ***0***     
    3               3                    ***0***     
    4                                                
    5                                                  my_agent      agent;
    6                                                  my_subscriber subscriber;
    7                                                  my_scoreboard scoreboard;
    8                                                  virtual intf my_vif;
    9                                                
    10                                                 function new(string name, uvm_component parent);
    11              1                          1       super.new(name, parent);
    12                                                 endfunction
    13                                               
    14                                                 function void build_phase(uvm_phase phase);
    15              1                          1       super.build_phase(phase);
    16                                               
    17                                                   // Create the agent//subscriber// scoreboard
    18              1                          1         agent      = my_agent     ::type_id::create("agent"     , this);
    19              1                          1         subscriber = my_subscriber::type_id::create("subscriber", this);
    20              1                          1         scoreboard = my_scoreboard::type_id::create("scoreboard", this);
    21                                               
    22                                                   // Get the virtual interface and set it for the agent
    23                                                   if (!uvm_config_db#(virtual intf)::get(this, "", "my_vif", my_vif))
    24              1                    ***0***           `uvm_fatal(get_full_name(), "Error")
    25                                                   
    26              1                          1            uvm_config_db#(virtual intf)::set(this, "agent", "my_vif", my_vif);
    27                                                 endfunction
    28                                               
    29                                                 function void connect_phase(uvm_phase phase);
    30              1                          1       super.connect_phase(phase);
    31                                               
    32                                                   // Connect the agent's analysis port directly to the scoreboard's analysis imp
    33              1                          1         agent.my_analysis_port.connect(scoreboard.my_analysis_imp);
    34                                                   // Connect the agent's analysis port to the subscriber's analysis export
    35              1                          1         agent.my_analysis_port.connect(subscriber.analysis_export);
    36                                                 endfunction
    37                                               endclass

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         4         1         3     25.00

================================Branch Details================================

Branch Coverage for file my_env.sv --

------------------------------------IF Branch------------------------------------
    23                                         1     Count coming in to IF
    23              1                    ***0***         if (!uvm_config_db#(virtual intf)::get(this, "", "my_vif", my_vif))
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    24                                   ***0***     Count coming in to IF
    24              1                    ***0***           `uvm_fatal(get_full_name(), "Error")
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%



=================================================================================
=== File: my_monitor.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           19        15         4     78.94

================================Statement Details================================

Statement Coverage for file my_monitor.sv --

    1                                                class my_monitor extends uvm_monitor;
    2               1                    ***0***       `uvm_component_utils(my_monitor)
    2               2                    ***0***     
    2               3                    ***0***     
    3                                                
    4                                                  my_sequence_item seq_item;
    5                                                  uvm_analysis_port#(my_sequence_item) my_analysis_port; // 1 inst port
    6                                                  virtual intf my_vif;
    7                                                  
    8                                                
    9                                                  function new (string name = "my_monitor", uvm_component parent);
    10              1                          1       super.new(name, parent);
    11                                                 endfunction
    12                                                 
    13                                                 function void build_phase(uvm_phase phase);
    14              1                          1       super.build_phase(phase);
    15                                                   
    16                                                   if(!uvm_config_db#(virtual intf)::get(this,"", "my_vif", my_vif))
    17              1                    ***0***           `uvm_fatal(get_full_name(), "Error")
    18                                                     
    19              1                          1           my_analysis_port = new("my_analysis_port", this); // 2 handle
    20                                                   
    21              1                          1           seq_item = my_sequence_item::type_id::create("seq_item");
    22                                                   
    23                                                 endfunction
    24                                                 
    25                                                task  run_phase(uvm_phase phase);
    26              1                          1       super.run_phase(phase);
    27                                                 
    28              1                          1       forever begin
    29              1                        110         #10;
    30              1                        109         @(my_vif.cb);
    31                                               
    32              1                        109           seq_item.cipher_text = my_vif.cipher_text; 
    33              1                        109           seq_item.valid_out   = my_vif.valid_out  ;    
    34              1                        109           seq_item.valid_in    = my_vif.valid_in   ;    
    35              1                        109           seq_item.cipher_key  = my_vif.cipher_key ;  
    36              1                        109           seq_item.plain_text  = my_vif.plain_text ; 
    37              1                        109           seq_item.reset       = my_vif.reset      ;
    38                                                  
    39              1                        109           my_analysis_port.write(seq_item);
    40                                                 end
    41                                               endtask
    42                                               endclass

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         4         1         3     25.00

================================Branch Details================================

Branch Coverage for file my_monitor.sv --

------------------------------------IF Branch------------------------------------
    16                                         1     Count coming in to IF
    16              1                    ***0***         if(!uvm_config_db#(virtual intf)::get(this,"", "my_vif", my_vif))
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    17                                   ***0***     Count coming in to IF
    17              1                    ***0***           `uvm_fatal(get_full_name(), "Error")
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%



=================================================================================
=== File: my_scoreboard.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           34        27         7     79.41

================================Statement Details================================

Statement Coverage for file my_scoreboard.sv --

    1                                                class my_scoreboard extends uvm_scoreboard;
    2               1                    ***0***       `uvm_component_utils(my_scoreboard)
    2               2                    ***0***     
    2               3                          4     
    3                                                
    4                                                  my_sequence_item seq_item;
    5                                                  // Declare analysis imp to directly receive transactions
    6                                                  uvm_analysis_imp#(my_sequence_item, my_scoreboard) my_analysis_imp;
    7                                                
    8                                                  int    file;
    9                                                  int    total_Data_valid;
    10                                                 int    total_reset;
    11                                                 reg   [127:0] expected_out;
    12                                                 string line;
    13                                                  
    14                                                 bit[127:0] plain_text_read;   // Size depends on my plain_text width
    15                                                 bit[127:0] cipher_key_read;   // Size depends on my cipher_key width
    16                                               
    17                                                 
    18                                                 function new(string name = "my_scoreboard", uvm_component parent);
    19              1                          1       super.new(name, parent);
    20                                                 endfunction
    21                                               
    22                                                 function void build_phase(uvm_phase phase);
    23              1                          1       super.build_phase(phase);
    24                                                   // Create analysis imp to write method
    25              1                          1         my_analysis_imp = new("my_analysis_imp", this);
    26                                                   
    27              1                          1         seq_item = my_sequence_item::type_id::create("seq_item");
    28                                                 endfunction 
    29                                                 
    30                                               function void write(my_sequence_item seq_item);
    31              1                        109         this.seq_item = seq_item;
    32                                               
    33                                                   if (!seq_item.reset) begin
    34              1                         10             total_reset++;
    35              1                         10             $display("RESET");
    36                                                   end else 
    37                                                   if(seq_item.valid_in) begin
    38              1                         99             total_Data_valid++;
    39              1                         99             $display("Data_valid");
    40                                               
    41              1                         99             file = $fopen("data_key.txt", "w");
    42                                                       if (file == 0) begin
    43              1                    ***0***                 $display("Error: cannot open data_key.txt for writing");
    44                                                       end
    45                                                    
    46                                                       // Write plain text and cipher key inside file
    47              1                         99             $fwrite(file, "%h\n", seq_item.plain_text);
    48              1                         99             $fwrite(file, "%h\n", seq_item.cipher_key);
    49                                                     //  $display("Plain text written to file: %h", seq_item.plain_text);
    50                                                     //  $display("Cipher key written to file: %h", seq_item.cipher_key);
    51                                                       // Close the file after writing
    52              1                         99             $fclose(file);
    53                                               
    54                                                       // Open file to read plain text and cipher key
    55              1                         99             file = $fopen("data_key.txt", "r");
    56                                                       if (file == 0) begin
    57              1                    ***0***                 $display("Error: cannot open data_key.txt for reading");
    58                                                       end
    59                                                       // Read plain text and cipher key from the file 
    60              1                         99             $fscanf(file, "%h\n", plain_text_read); 
    61              1                         99             $fscanf(file, "%h\n", cipher_key_read);
    62                                                       // we store data and key in cipher_key_read / plain_text_read
    63                                               
    64                                                       // Display the read values
    65                                                     //  $display("Plain text read from file: %h", plain_text_read);
    66                                                     //  $display("Cipher key read from file: %h", cipher_key_read);
    67                                               
    68                                                       // Close the file after reading
    69              1                         99             $fclose(file);
    70                                                    end
    71                                                     // This line runs the Python script ref_module.py using Python 3 
    72              1                        109           $system("python3 ref_module.py");
    73                                               
    74              1                        109           file = $fopen("output.txt", "r");
    75                                                     if (file == 0) begin
    76              1                    ***0***               $display("Error: Unable to open output.txt");
    77                                                     end
    78                                                     // $fgets() returns 0 if the end if there is an error.
    79                                                     if (!$fgets(line, file)) begin
    80              1                    ***0***               $display("Error: Unable to read from output.txt");
    81              1                    ***0***               $fclose(file);
    82                                                     end
    83                                                     // Store the hexadecimal value into the 'expected_out' variable.
    84              1                        109           $sscanf(line, "%h", expected_out);
    85              1                        109           $fclose(file);
    86                                               
    87                                                   // Compare expected and actual values (after reading the output)
    88                                                   if ((expected_out == seq_item.cipher_text) && (seq_item.valid_out == 1'b1)) begin
    89              1                         99             `uvm_info("[CHECK] ", $sformatf("[PASS] : \n Expected = %h  \n Actual   = %h", expected_out, seq_item.cipher_text), UVM_MEDIUM);
    90                                                   end else begin                                
    91              1                         10             `uvm_info("[CHECK] ", $sformatf("[ERROR]: \n Expected = %h  \n Actual   = %h", expected_out, seq_item.cipher_text), UVM_MEDIUM);
    92                                                   end
    93                                               
    94                                               endfunction
    95                                               
    96                                               function void report_phase(uvm_phase phase);
    97              1                          1     super.report_phase(phase);
    98              1                          1         `uvm_info(get_type_name(), $sformatf("total  reset  = %0d", total_reset), UVM_LOW)
    99              1                          1         `uvm_info(get_type_name(), $sformatf("total  Data_v = %0d", total_Data_valid), UVM_LOW)
    100                                              endfunction
    101                                              endclass
    102                                              

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        21        12         9     57.14

================================Branch Details================================

Branch Coverage for file my_scoreboard.sv --

------------------------------------IF Branch------------------------------------
    33                                       109     Count coming in to IF
    33              1                         10         if (!seq_item.reset) begin
    37              1                         99         if(seq_item.valid_in) begin
                                         ***0***     All False Count
Branch totals: 2 hits of 3 branches = 66.66%

------------------------------------IF Branch------------------------------------
    42                                        99     Count coming in to IF
    42              1                    ***0***             if (file == 0) begin
                                              99     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    56                                        99     Count coming in to IF
    56              1                    ***0***             if (file == 0) begin
                                              99     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    75                                       109     Count coming in to IF
    75              1                    ***0***           if (file == 0) begin
                                             109     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    79                                       109     Count coming in to IF
    79              1                    ***0***           if (!$fgets(line, file)) begin
                                             109     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    88                                       109     Count coming in to IF
    88              1                         99         if ((expected_out == seq_item.cipher_text) && (seq_item.valid_out == 1'b1)) begin
    90              1                         10         end else begin                                
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    89                                        99     Count coming in to IF
    89              1                         99             `uvm_info("[CHECK] ", $sformatf("[PASS] : \n Expected = %h  \n Actual   = %h", expected_out, seq_item.cipher_text), UVM_MEDIUM);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    91                                        10     Count coming in to IF
    91              1                         10             `uvm_info("[CHECK] ", $sformatf("[ERROR]: \n Expected = %h  \n Actual   = %h", expected_out, seq_item.cipher_text), UVM_MEDIUM);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    98                                         1     Count coming in to IF
    98              1                          1         `uvm_info(get_type_name(), $sformatf("total  reset  = %0d", total_reset), UVM_LOW)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    99                                         1     Count coming in to IF
    99              1                          1         `uvm_info(get_type_name(), $sformatf("total  Data_v = %0d", total_Data_valid), UVM_LOW)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              5         1         4     20.00

================================Condition Details================================

Condition Coverage for file my_scoreboard.sv --

----------------Focused Condition View-------------------
Line       42 Item    1  (this.file == 0)
Condition totals: 0 of 1 input term covered = 0.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
  (this.file == 0)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (this.file == 0)_0    -                             
  Row   2:    ***0***  (this.file == 0)_1    -                             

----------------Focused Condition View-------------------
Line       56 Item    1  (this.file == 0)
Condition totals: 0 of 1 input term covered = 0.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
  (this.file == 0)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (this.file == 0)_0    -                             
  Row   2:    ***0***  (this.file == 0)_1    -                             

----------------Focused Condition View-------------------
Line       75 Item    1  (this.file == 0)
Condition totals: 0 of 1 input term covered = 0.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
  (this.file == 0)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (this.file == 0)_0    -                             
  Row   2:    ***0***  (this.file == 0)_1    -                             

----------------Focused Condition View-------------------
Line       88 Item    1  ((this.expected_out == seq_item.cipher_text) && seq_item.valid_out)
Condition totals: 1 of 2 input terms covered = 50.00%

                                   Input Term   Covered  Reason for no coverage   Hint
                                  -----------  --------  -----------------------  --------------
  (this.expected_out == seq_item.cipher_text)         Y
                           seq_item.valid_out         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target                                     Non-masking condition(s)      
 ---------  ---------  --------------------                           -------------------------     
  Row   1:          1  (this.expected_out == seq_item.cipher_text)_0  -                             
  Row   2:          1  (this.expected_out == seq_item.cipher_text)_1  seq_item.valid_out            
  Row   3:    ***0***  seq_item.valid_out_0                           (this.expected_out == seq_item.cipher_text)
  Row   4:          1  seq_item.valid_out_1                           (this.expected_out == seq_item.cipher_text)



=================================================================================
=== File: my_sequence.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           21        12         9     57.14

================================Statement Details================================

Statement Coverage for file my_sequence.sv --

    1                                                
    2                                                class my_sequence extends uvm_sequence;
    3               1                    ***0***       `uvm_object_utils(my_sequence)
    3               2                    ***0***     
    3               3                    ***0***     
    3               4                    ***0***     
    3               5                    ***0***     
    3               6                        201     
    3               7                    ***0***     
    3               8                    ***0***     
    3               9                    ***0***     
    3              10                    ***0***     
    4                                                
    5                                                   my_sequence_item seq_item;
    6                                                
    7                                                  function new(string name = "my_sequence");
    8               1                          1       super.new(name);
    9                                                  endfunction
    10                                                 
    11                                                 task pre_body; // inested of build phase
    12              1                          1       seq_item = my_sequence_item::type_id::create("seq_item");  // handle
    13                                                 endtask
    14                                                 
    15                                                 task reset ;
    16              1                         10         repeat(10) begin
    17                                                     
    18              1                         10         start_item(seq_item);
    19                                                       assert (seq_item.randomize() with {seq_item.reset==0 ; seq_item.valid_in == 0;})
    20                                                       else 
    21                                                       $error(" reset error") ;
    22              1                         10         finish_item(seq_item);
    23                                                   end  
    24                                                 endtask
    25                                                
    26                                                 task valid ;
    27              1                        100         repeat(100) begin
    28                                                     
    29              1                        100         start_item(seq_item);
    30              1                        100            assert (seq_item.randomize() with {seq_item.valid_in == 1 ;seq_item.reset==1 ;})
    31                                                       else 
    32                                                       $error("error") ;
    33                                                   finish_item(seq_item);
    34              1                        100         end  
    35                                                 endtask
    36                                                 
    37                                                 task body;
    38                                                   reset;
    39              1                          1         valid;
    40              1                          1       endtask
    41                                               
    42                                               endclass
    43                                               

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        12         1        11      8.33

================================Branch Details================================

Branch Coverage for file my_sequence.sv --

------------------------------------IF Branch------------------------------------
    3                                    ***0***     Count coming in to IF
    3               1                    ***0***       `uvm_object_utils(my_sequence)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    3                                    ***0***     Count coming in to IF
    3               2                    ***0***       `uvm_object_utils(my_sequence)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    3                                    ***0***     Count coming in to IF
    3               3                    ***0***       `uvm_object_utils(my_sequence)
    3               4                    ***0***       `uvm_object_utils(my_sequence)
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    3                                    ***0***     Count coming in to IF
    3               5                    ***0***       `uvm_object_utils(my_sequence)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    3                                    ***0***     Count coming in to IF
    3               6                    ***0***       `uvm_object_utils(my_sequence)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    30                                       100     Count coming in to IF
    30              1                        100            assert (seq_item.randomize() with {seq_item.valid_in == 1 ;seq_item.reset==1 ;})
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              2         0         2      0.00

================================Condition Details================================

Condition Coverage for file my_sequence.sv --

----------------Focused Condition View-------------------
Line       3 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       3 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             



=================================================================================
=== File: my_sequence_item.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           11         2         9     18.18

================================Statement Details================================

Statement Coverage for file my_sequence_item.sv --

    1                                                
    2                                                class my_sequence_item extends uvm_sequence_item;
    3               1                    ***0***       `uvm_object_utils(my_sequence_item)
    3               2                    ***0***     
    3               3                    ***0***     
    3               4                    ***0***     
    3               5                    ***0***     
    3               6                        110     
    3               7                    ***0***     
    3               8                    ***0***     
    3               9                    ***0***     
    3              10                    ***0***     
    4                                                
    5                                                  function new (string name = "my_sequence_item");
    6               1                          4       super.new(name);
    7                                                  endfunction
    8                                                  
    9                                                    rand bit valid_in;
    10                                                   rand bit reset   ;
    11                                                   rand bit [127:0] cipher_key, plain_text; 
    12                                                   logic  valid_out;
    13                                                   logic [127:0] cipher_text;
    14                                               
    15                                                   // Constraints
    16                                                   constraint valid_IN
    17                                                    {
    18                                                     valid_in dist {1 := 70, 0 := 30}; // 70% chance for valid_in to be 1, 30% chance for valid_in to be 0
    19                                                    }
    20                                                   constraint rst 
    21                                                    {
    22                                                     reset dist {1:=50,0:=50}; 
    23                                                    }
    24                                               
    25                                                   constraint cipher_key_c 
    26                                                    {
    27                                                     cipher_key dist { [128'h0 : 128'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD] :/ 100}; 
    28                                                    }
    29                                               
    30                                                   constraint plain_text_c 
    31                                                    {
    32                                                     plain_text dist { [128'h0 : 128'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD] :/ 100};
    33                                                    }
    34                                               
    35                                               endclass
    36                                               
    37                                               
    38                                               
    39                                               
    40                                               
    41                                               
    42                                               
    43                                               

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        10         0        10      0.00

================================Branch Details================================

Branch Coverage for file my_sequence_item.sv --

------------------------------------IF Branch------------------------------------
    3                                    ***0***     Count coming in to IF
    3               1                    ***0***       `uvm_object_utils(my_sequence_item)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    3                                    ***0***     Count coming in to IF
    3               2                    ***0***       `uvm_object_utils(my_sequence_item)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    3                                    ***0***     Count coming in to IF
    3               3                    ***0***       `uvm_object_utils(my_sequence_item)
    3               4                    ***0***       `uvm_object_utils(my_sequence_item)
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    3                                    ***0***     Count coming in to IF
    3               5                    ***0***       `uvm_object_utils(my_sequence_item)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    3                                    ***0***     Count coming in to IF
    3               6                    ***0***       `uvm_object_utils(my_sequence_item)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              2         0         2      0.00

================================Condition Details================================

Condition Coverage for file my_sequence_item.sv --

----------------Focused Condition View-------------------
Line       3 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       3 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             



=================================================================================
=== File: my_sequencer.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            7         4         3     57.14

================================Statement Details================================

Statement Coverage for file my_sequencer.sv --

    1                                                
    2                                                
    3                                                class my_sequencer extends uvm_sequencer #(my_sequence_item);
    4               1                    ***0***       `uvm_component_utils(my_sequencer)
    4               2                    ***0***     
    4               3                    ***0***     
    5                                                   my_sequence_item seq_item;
    6                                                  
    7                                                  function new(string name = "my_sequencer", uvm_component parent);
    8               1                          1       super.new(name, parent);
    9                                                  endfunction
    10                                                 
    11                                                 function void build_phase(uvm_phase phase);
    12              1                          1       super.build_phase(phase);
    13                                                 endfunction
    14                                                 
    15                                                 function void connect_phase(uvm_phase phase);
    16              1                          1       super.connect_phase(phase);
    17                                                 endfunction
    18                                                 
    19                                                 task run_phase(uvm_phase phase);
    20              1                          1       super.run_phase(phase);
    21                                                 endtask
    22                                                 
    23                                               endclass


=================================================================================
=== File: my_subscriber.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           12        10         2     83.33

================================Statement Details================================

Statement Coverage for file my_subscriber.sv --

    1                                                
    2                                                class my_subscriber extends uvm_subscriber#(my_sequence_item);
    3               1                    ***0***       `uvm_component_utils(my_subscriber)
    3               2                    ***0***     
    3               3                          2     
    4                                                   my_sequence_item seq_item;
    5                                                   int final_cover;
    6                                                  
    7                                                  covergroup group_1 ;
    8                                                
    9                                                    plain_text:  coverpoint seq_item.plain_text 
    10                                                   {
    11                                                     bins in1_low  = {128'h0};
    12                                                     bins in2_high = {128'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF };
    13                                                     bins in3_mid  = {[128'h00000000000000000000000000000001 : 128'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE ]};
    14                                                   }
    15                                               
    16                                               		
    17                                                   cipher_key: coverpoint seq_item.cipher_key
    18                                                   {
    19                                                     bins key_in1_L = {128'h0 };
    20                                                     bins key_in2_H = {128'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF};
    21                                                     bins key_in3_M = {[128'h00000000000000000000000000000001 : 128'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE]};
    22                                                   }
    23                                                   
    24                                                   reset: coverpoint seq_item.reset
    25                                                   {
    26                                                     bins reset_L = {1'h0 };
    27                                                     bins reset_H = {1'h1} ;
    28                                                   }
    29                                                   
    30                                                   valid_in: coverpoint seq_item.valid_in
    31                                                   {
    32                                                     bins valid_L = {1'h0 };
    33                                                     bins valid_H = {1'h1} ;
    34                                                   }
    35                                                   
    36                                                   
    37                                                   valid_out: coverpoint seq_item.valid_out 
    38                                                   {
    39                                                     bins validO_L = {1'h0 };
    40                                                     bins validO_H = {1'h1} ;
    41                                                   }
    42                                                   
    43                                                   cipher_text: coverpoint seq_item.cipher_text
    44                                                   {
    45                                                     bins key_in1_L = {128'h0 };
    46                                                     bins key_in2_H = {128'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF};
    47                                                     bins key_in3_M = {[128'h00000000000000000000000000000001 : 128'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE]};
    48                                                   }
    49                                                    
    50                                                   cross1 :cross cipher_key,plain_text,cipher_text,valid_in;
    51                                               	  
    52                                               	  endgroup
    53                                               
    54                                                 
    55                                                 function new(string name, uvm_component parent);
    56              1                          1       super.new(name, parent);
    57              1                          1       group_1 = new();
    58                                                 endfunction
    59                                               
    60                                                 function void write(my_sequence_item t);
    61              1                        109         this.seq_item = t; 
    62                                                   // Sample the coverage group with the sequence item
    63              1                        109         group_1.sample();
    64                                                 endfunction
    65                                                 
    66                                                 function void build_phase(uvm_phase phase);
    67              1                          1       super.build_phase(phase);
    68              1                          1         seq_item= my_sequence_item::type_id::create("seq_item");
    69                                                 endfunction
    70                                               
    71                                                 function void report_phase(uvm_phase phase);
    72              1                          1       super.report_phase(phase);
    73              1                          1          final_cover = group_1.get_coverage();
    74              1                          1         `uvm_info(get_type_name(), $sformatf("Final Coverage is: %0f", final_cover), UVM_LOW);
    75                                                 endfunction
    76                                                
    77                                               endclass

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         2         1         1     50.00

================================Branch Details================================

Branch Coverage for file my_subscriber.sv --

------------------------------------IF Branch------------------------------------
    74                                         1     Count coming in to IF
    74              1                          1         `uvm_info(get_type_name(), $sformatf("Final Coverage is: %0f", final_cover), UVM_LOW);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%



=================================================================================
=== File: my_test.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           13        10         3     76.92

================================Statement Details================================

Statement Coverage for file my_test.sv --

    1                                                
    2                                                class my_test extends uvm_test;
    3               1                    ***0***       `uvm_component_utils(my_test)
    3               2                    ***0***     
    3               3                          1     
    4                                                   my_env env ;
    5                                                   my_sequence seq_inst ;
    6                                                   virtual intf my_vif ;
    7                                                 
    8                                                  
    9                                                  function new(string name, uvm_component parent);
    10              1                          1       super.new(name, parent);
    11                                                 endfunction
    12                                                 
    13                                                 function void build_phase(uvm_phase phase);
    14              1                          1       super.build_phase(phase);
    15                                                   
    16                                                   if(!uvm_config_db#(virtual intf)::get(this, "", "my_vif", my_vif))
    17              1                    ***0***           `uvm_fatal(get_full_name(), "Error")
    18                                               
    19              1                          1            uvm_config_db#(virtual intf)::set(this, "env", "my_vif", my_vif);
    20              1                          1         env      = my_env     ::type_id::create("env", this);
    21              1                          1         seq_inst = my_sequence::type_id::create("seq_inst") ;
    22                                                
    23                                                 endfunction
    24                                                
    25                                                 task run_phase(uvm_phase phase);
    26              1                          1       super.run_phase(phase);
    27                                               
    28              1                          1         phase.raise_objection(this);
    29              1                          1           seq_inst.start(env.agent.sequencer);
    30              1                          1         phase.drop_objection(this) ;
    31                                                 endtask
    32                                                 
    33                                               endclass 

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         4         1         3     25.00

================================Branch Details================================

Branch Coverage for file my_test.sv --

------------------------------------IF Branch------------------------------------
    16                                         1     Count coming in to IF
    16              1                    ***0***         if(!uvm_config_db#(virtual intf)::get(this, "", "my_vif", my_vif))
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    17                                   ***0***     Count coming in to IF
    17              1                    ***0***           `uvm_fatal(get_full_name(), "Error")
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%



=================================================================================
=== File: my_vif.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            4         4         0    100.00

================================Statement Details================================

Statement Coverage for file my_vif.sv --

    1                                                
    2                                                
    3                                                interface intf (input logic clk);
    4                                                    logic reset    ;
    5                                                    logic valid_in ;
    6                                                    logic valid_out;
    7                                                    logic [127:0] cipher_key ;
    8                                                    logic [127:0] plain_text ; 
    9                                                    logic [127:0] cipher_text;
    10                                                   
    11                                                 
    12              1                          1       clocking cb @(posedge clk );
    13                                                 default input #1step output #1step;
    14              1                          1         input  valid_in  ;
    15              1                          1         input  cipher_key;
    16              1                          1         input  plain_text;
    17                                                   output cipher_text;
    18                                                   output valid_out  ;
    19                                                 endclocking
    20                                               endinterface
    21                                               
    22                                               
    23                                               
    24                                               
    25                                               

Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                    776       773         3     99.61

================================Toggle Details================================

Toggle Coverage for File my_vif.sv --

       Line                                   Node      1H->0L      0L->1H  "Coverage"
--------------------------------------------------------------------------------------
          4                                  reset           0           1       50.00 
          5                               valid_in           0           1       50.00 
          6                              valid_out           0           1       50.00 

Total Node Count     =        388 
Toggled Node Count   =        385 
Untoggled Node Count =          3 

Toggle Coverage      =      99.61% (773 of 776 bins)

=================================================================================
=== File: sbox.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                          257       257         0    100.00

================================Statement Details================================

Statement Coverage for file sbox.v --

    1                                                module sbox(a,c);
    2                                                  
    3                                                input  [7:0] a; 
    4                                                output [7:0] c;
    5                                                    
    6                                                reg [7:0] c;
    7                                                    
    8                                                    
    9               1                      97390        always @(a)
    10                                                   case (a)
    11              1                        393           8'h00: c=8'h63;
    12              1                        416     	   8'h01: c=8'h7c;
    13              1                        366     	   8'h02: c=8'h77;
    14              1                        388     	   8'h03: c=8'h7b;
    15              1                        377     	   8'h04: c=8'hf2;
    16              1                        375     	   8'h05: c=8'h6b;
    17              1                        375     	   8'h06: c=8'h6f;
    18              1                        357     	   8'h07: c=8'hc5;
    19              1                        387     	   8'h08: c=8'h30;
    20              1                        376     	   8'h09: c=8'h01;
    21              1                        380     	   8'h0a: c=8'h67;
    22              1                        387     	   8'h0b: c=8'h2b;
    23              1                        394     	   8'h0c: c=8'hfe;
    24              1                        349     	   8'h0d: c=8'hd7;
    25              1                        357     	   8'h0e: c=8'hab;
    26              1                        353     	   8'h0f: c=8'h76;
    27              1                        398     	   8'h10: c=8'hca;
    28              1                        403     	   8'h11: c=8'h82;
    29              1                        377     	   8'h12: c=8'hc9;
    30              1                        364     	   8'h13: c=8'h7d;
    31              1                        370     	   8'h14: c=8'hfa;
    32              1                        374     	   8'h15: c=8'h59;
    33              1                        364     	   8'h16: c=8'h47;
    34              1                        370     	   8'h17: c=8'hf0;
    35              1                        425     	   8'h18: c=8'had;
    36              1                        338     	   8'h19: c=8'hd4;
    37              1                        384     	   8'h1a: c=8'ha2;
    38              1                        366     	   8'h1b: c=8'haf;
    39              1                        386     	   8'h1c: c=8'h9c;
    40              1                        366     	   8'h1d: c=8'ha4;
    41              1                        397     	   8'h1e: c=8'h72;
    42              1                        398     	   8'h1f: c=8'hc0;
    43              1                        359     	   8'h20: c=8'hb7;
    44              1                        374     	   8'h21: c=8'hfd;
    45              1                        400     	   8'h22: c=8'h93;
    46              1                        375     	   8'h23: c=8'h26;
    47              1                        399     	   8'h24: c=8'h36;
    48              1                        394     	   8'h25: c=8'h3f;
    49              1                        371     	   8'h26: c=8'hf7;
    50              1                        367     	   8'h27: c=8'hcc;
    51              1                        350     	   8'h28: c=8'h34;
    52              1                        405     	   8'h29: c=8'ha5;
    53              1                        388     	   8'h2a: c=8'he5;
    54              1                        348     	   8'h2b: c=8'hf1;
    55              1                        377     	   8'h2c: c=8'h71;
    56              1                        365     	   8'h2d: c=8'hd8;
    57              1                        358     	   8'h2e: c=8'h31;
    58              1                        389     	   8'h2f: c=8'h15;
    59              1                        369     	   8'h30: c=8'h04;
    60              1                        388     	   8'h31: c=8'hc7;
    61              1                        362     	   8'h32: c=8'h23;
    62              1                        400     	   8'h33: c=8'hc3;
    63              1                        402     	   8'h34: c=8'h18;
    64              1                        329     	   8'h35: c=8'h96;
    65              1                        357     	   8'h36: c=8'h05;
    66              1                        374     	   8'h37: c=8'h9a;
    67              1                        373     	   8'h38: c=8'h07;
    68              1                        356     	   8'h39: c=8'h12;
    69              1                        360     	   8'h3a: c=8'h80;
    70              1                        379     	   8'h3b: c=8'he2;
    71              1                        374     	   8'h3c: c=8'heb;
    72              1                        373     	   8'h3d: c=8'h27;
    73              1                        361     	   8'h3e: c=8'hb2;
    74              1                        397     	   8'h3f: c=8'h75;
    75              1                        373     	   8'h40: c=8'h09;
    76              1                        367     	   8'h41: c=8'h83;
    77              1                        389     	   8'h42: c=8'h2c;
    78              1                        365     	   8'h43: c=8'h1a;
    79              1                        428     	   8'h44: c=8'h1b;
    80              1                        378     	   8'h45: c=8'h6e;
    81              1                        351     	   8'h46: c=8'h5a;
    82              1                        363     	   8'h47: c=8'ha0;
    83              1                        376     	   8'h48: c=8'h52;
    84              1                        351     	   8'h49: c=8'h3b;
    85              1                        368     	   8'h4a: c=8'hd6;
    86              1                        413     	   8'h4b: c=8'hb3;
    87              1                        391     	   8'h4c: c=8'h29;
    88              1                        335     	   8'h4d: c=8'he3;
    89              1                        367     	   8'h4e: c=8'h2f;
    90              1                        386     	   8'h4f: c=8'h84;
    91              1                        398     	   8'h50: c=8'h53;
    92              1                        386     	   8'h51: c=8'hd1;
    93              1                        383     	   8'h52: c=8'h00;
    94              1                        398     	   8'h53: c=8'hed;
    95              1                        385     	   8'h54: c=8'h20;
    96              1                        387     	   8'h55: c=8'hfc;
    97              1                        378     	   8'h56: c=8'hb1;
    98              1                        371     	   8'h57: c=8'h5b;
    99              1                        346     	   8'h58: c=8'h6a;
    100             1                        374     	   8'h59: c=8'hcb;
    101             1                        395     	   8'h5a: c=8'hbe;
    102             1                        401     	   8'h5b: c=8'h39;
    103             1                        427     	   8'h5c: c=8'h4a;
    104             1                        384     	   8'h5d: c=8'h4c;
    105             1                        353     	   8'h5e: c=8'h58;
    106             1                        386     	   8'h5f: c=8'hcf;
    107             1                        407     	   8'h60: c=8'hd0;
    108             1                        401     	   8'h61: c=8'hef;
    109             1                        408     	   8'h62: c=8'haa;
    110             1                        384     	   8'h63: c=8'hfb;
    111             1                        428     	   8'h64: c=8'h43;
    112             1                        376     	   8'h65: c=8'h4d;
    113             1                        385     	   8'h66: c=8'h33;
    114             1                        385     	   8'h67: c=8'h85;
    115             1                        382     	   8'h68: c=8'h45;
    116             1                        356     	   8'h69: c=8'hf9;
    117             1                        377     	   8'h6a: c=8'h02;
    118             1                        397     	   8'h6b: c=8'h7f;
    119             1                        408     	   8'h6c: c=8'h50;
    120             1                        386     	   8'h6d: c=8'h3c;
    121             1                        385     	   8'h6e: c=8'h9f;
    122             1                        400     	   8'h6f: c=8'ha8;
    123             1                        361     	   8'h70: c=8'h51;
    124             1                        410     	   8'h71: c=8'ha3;
    125             1                        377     	   8'h72: c=8'h40;
    126             1                        381     	   8'h73: c=8'h8f;
    127             1                        415     	   8'h74: c=8'h92;
    128             1                        398     	   8'h75: c=8'h9d;
    129             1                        390     	   8'h76: c=8'h38;
    130             1                        389     	   8'h77: c=8'hf5;
    131             1                        378     	   8'h78: c=8'hbc;
    132             1                        339     	   8'h79: c=8'hb6;
    133             1                        358     	   8'h7a: c=8'hda;
    134             1                        384     	   8'h7b: c=8'h21;
    135             1                        389     	   8'h7c: c=8'h10;
    136             1                        403     	   8'h7d: c=8'hff;
    137             1                        408     	   8'h7e: c=8'hf3;
    138             1                        405     	   8'h7f: c=8'hd2;
    139             1                        339     	   8'h80: c=8'hcd;
    140             1                        394     	   8'h81: c=8'h0c;
    141             1                        368     	   8'h82: c=8'h13;
    142             1                        389     	   8'h83: c=8'hec;
    143             1                        358     	   8'h84: c=8'h5f;
    144             1                        371     	   8'h85: c=8'h97;
    145             1                        417     	   8'h86: c=8'h44;
    146             1                        376     	   8'h87: c=8'h17;
    147             1                        418     	   8'h88: c=8'hc4;
    148             1                        388     	   8'h89: c=8'ha7;
    149             1                        378     	   8'h8a: c=8'h7e;
    150             1                        380     	   8'h8b: c=8'h3d;
    151             1                        384     	   8'h8c: c=8'h64;
    152             1                        390     	   8'h8d: c=8'h5d;
    153             1                        378     	   8'h8e: c=8'h19;
    154             1                        356     	   8'h8f: c=8'h73;
    155             1                        389     	   8'h90: c=8'h60;
    156             1                        364     	   8'h91: c=8'h81;
    157             1                        394     	   8'h92: c=8'h4f;
    158             1                        368     	   8'h93: c=8'hdc;
    159             1                        406     	   8'h94: c=8'h22;
    160             1                        426     	   8'h95: c=8'h2a;
    161             1                        366     	   8'h96: c=8'h90;
    162             1                        384     	   8'h97: c=8'h88;
    163             1                        372     	   8'h98: c=8'h46;
    164             1                        387     	   8'h99: c=8'hee;
    165             1                        393     	   8'h9a: c=8'hb8;
    166             1                        370     	   8'h9b: c=8'h14;
    167             1                        380     	   8'h9c: c=8'hde;
    168             1                        365     	   8'h9d: c=8'h5e;
    169             1                        345     	   8'h9e: c=8'h0b;
    170             1                        383     	   8'h9f: c=8'hdb;
    171             1                        399     	   8'ha0: c=8'he0;
    172             1                        396     	   8'ha1: c=8'h32;
    173             1                        383     	   8'ha2: c=8'h3a;
    174             1                        351     	   8'ha3: c=8'h0a;
    175             1                        354     	   8'ha4: c=8'h49;
    176             1                        403     	   8'ha5: c=8'h06;
    177             1                        413     	   8'ha6: c=8'h24;
    178             1                        381     	   8'ha7: c=8'h5c;
    179             1                        353     	   8'ha8: c=8'hc2;
    180             1                        381     	   8'ha9: c=8'hd3;
    181             1                        382     	   8'haa: c=8'hac;
    182             1                        389     	   8'hab: c=8'h62;
    183             1                        391     	   8'hac: c=8'h91;
    184             1                        395     	   8'had: c=8'h95;
    185             1                        377     	   8'hae: c=8'he4;
    186             1                        391     	   8'haf: c=8'h79;
    187             1                        430     	   8'hb0: c=8'he7;
    188             1                        342     	   8'hb1: c=8'hc8;
    189             1                        398     	   8'hb2: c=8'h37;
    190             1                        373     	   8'hb3: c=8'h6d;
    191             1                        374     	   8'hb4: c=8'h8d;
    192             1                        411     	   8'hb5: c=8'hd5;
    193             1                        367     	   8'hb6: c=8'h4e;
    194             1                        348     	   8'hb7: c=8'ha9;
    195             1                        375     	   8'hb8: c=8'h6c;
    196             1                        349     	   8'hb9: c=8'h56;
    197             1                        364     	   8'hba: c=8'hf4;
    198             1                        370     	   8'hbb: c=8'hea;
    199             1                        383     	   8'hbc: c=8'h65;
    200             1                        403     	   8'hbd: c=8'h7a;
    201             1                        355     	   8'hbe: c=8'hae;
    202             1                        401     	   8'hbf: c=8'h08;
    203             1                        374     	   8'hc0: c=8'hba;
    204             1                        393     	   8'hc1: c=8'h78;
    205             1                        390     	   8'hc2: c=8'h25;
    206             1                        333     	   8'hc3: c=8'h2e;
    207             1                        396     	   8'hc4: c=8'h1c;
    208             1                        382     	   8'hc5: c=8'ha6;
    209             1                        375     	   8'hc6: c=8'hb4;
    210             1                        363     	   8'hc7: c=8'hc6;
    211             1                        393     	   8'hc8: c=8'he8;
    212             1                        392     	   8'hc9: c=8'hdd;
    213             1                        345     	   8'hca: c=8'h74;
    214             1                        368     	   8'hcb: c=8'h1f;
    215             1                        379     	   8'hcc: c=8'h4b;
    216             1                        357     	   8'hcd: c=8'hbd;
    217             1                        386     	   8'hce: c=8'h8b;
    218             1                        403     	   8'hcf: c=8'h8a;
    219             1                        390     	   8'hd0: c=8'h70;
    220             1                        419     	   8'hd1: c=8'h3e;
    221             1                        397     	   8'hd2: c=8'hb5;
    222             1                        394     	   8'hd3: c=8'h66;
    223             1                        403     	   8'hd4: c=8'h48;
    224             1                        356     	   8'hd5: c=8'h03;
    225             1                        421     	   8'hd6: c=8'hf6;
    226             1                        334     	   8'hd7: c=8'h0e;
    227             1                        350     	   8'hd8: c=8'h61;
    228             1                        382     	   8'hd9: c=8'h35;
    229             1                        387     	   8'hda: c=8'h57;
    230             1                        379     	   8'hdb: c=8'hb9;
    231             1                        401     	   8'hdc: c=8'h86;
    232             1                        379     	   8'hdd: c=8'hc1;
    233             1                        367     	   8'hde: c=8'h1d;
    234             1                        363     	   8'hdf: c=8'h9e;
    235             1                        371     	   8'he0: c=8'he1;
    236             1                        391     	   8'he1: c=8'hf8;
    237             1                        398     	   8'he2: c=8'h98;
    238             1                        362     	   8'he3: c=8'h11;
    239             1                        379     	   8'he4: c=8'h69;
    240             1                        371     	   8'he5: c=8'hd9;
    241             1                        398     	   8'he6: c=8'h8e;
    242             1                        357     	   8'he7: c=8'h94;
    243             1                        354     	   8'he8: c=8'h9b;
    244             1                        410     	   8'he9: c=8'h1e;
    245             1                        404     	   8'hea: c=8'h87;
    246             1                        348     	   8'heb: c=8'he9;
    247             1                        418     	   8'hec: c=8'hce;
    248             1                        378     	   8'hed: c=8'h55;
    249             1                        388     	   8'hee: c=8'h28;
    250             1                        370     	   8'hef: c=8'hdf;
    251             1                        403     	   8'hf0: c=8'h8c;
    252             1                        401     	   8'hf1: c=8'ha1;
    253             1                        360     	   8'hf2: c=8'h89;
    254             1                        365     	   8'hf3: c=8'h0d;
    255             1                        417     	   8'hf4: c=8'hbf;
    256             1                        376     	   8'hf5: c=8'he6;
    257             1                        387     	   8'hf6: c=8'h42;
    258             1                        391     	   8'hf7: c=8'h68;
    259             1                        378     	   8'hf8: c=8'h41;
    260             1                        376     	   8'hf9: c=8'h99;
    261             1                        429     	   8'hfa: c=8'h2d;
    262             1                        354     	   8'hfb: c=8'h0f;
    263             1                        369     	   8'hfc: c=8'hb0;
    264             1                        354     	   8'hfd: c=8'h54;
    265             1                        373     	   8'hfe: c=8'hbb;
    266             1                        365     	   8'hff: c=8'h16;
    267                                              	endcase
    268                                                
    269                                              endmodule

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                       257       256         1     99.61

================================Branch Details================================

Branch Coverage for file sbox.v --

------------------------------------CASE Branch------------------------------------
    10                                     97390     Count coming in to CASE
    11              1                        393           8'h00: c=8'h63;
    12              1                        416     	   8'h01: c=8'h7c;
    13              1                        366     	   8'h02: c=8'h77;
    14              1                        388     	   8'h03: c=8'h7b;
    15              1                        377     	   8'h04: c=8'hf2;
    16              1                        375     	   8'h05: c=8'h6b;
    17              1                        375     	   8'h06: c=8'h6f;
    18              1                        357     	   8'h07: c=8'hc5;
    19              1                        387     	   8'h08: c=8'h30;
    20              1                        376     	   8'h09: c=8'h01;
    21              1                        380     	   8'h0a: c=8'h67;
    22              1                        387     	   8'h0b: c=8'h2b;
    23              1                        394     	   8'h0c: c=8'hfe;
    24              1                        349     	   8'h0d: c=8'hd7;
    25              1                        357     	   8'h0e: c=8'hab;
    26              1                        353     	   8'h0f: c=8'h76;
    27              1                        398     	   8'h10: c=8'hca;
    28              1                        403     	   8'h11: c=8'h82;
    29              1                        377     	   8'h12: c=8'hc9;
    30              1                        364     	   8'h13: c=8'h7d;
    31              1                        370     	   8'h14: c=8'hfa;
    32              1                        374     	   8'h15: c=8'h59;
    33              1                        364     	   8'h16: c=8'h47;
    34              1                        370     	   8'h17: c=8'hf0;
    35              1                        425     	   8'h18: c=8'had;
    36              1                        338     	   8'h19: c=8'hd4;
    37              1                        384     	   8'h1a: c=8'ha2;
    38              1                        366     	   8'h1b: c=8'haf;
    39              1                        386     	   8'h1c: c=8'h9c;
    40              1                        366     	   8'h1d: c=8'ha4;
    41              1                        397     	   8'h1e: c=8'h72;
    42              1                        398     	   8'h1f: c=8'hc0;
    43              1                        359     	   8'h20: c=8'hb7;
    44              1                        374     	   8'h21: c=8'hfd;
    45              1                        400     	   8'h22: c=8'h93;
    46              1                        375     	   8'h23: c=8'h26;
    47              1                        399     	   8'h24: c=8'h36;
    48              1                        394     	   8'h25: c=8'h3f;
    49              1                        371     	   8'h26: c=8'hf7;
    50              1                        367     	   8'h27: c=8'hcc;
    51              1                        350     	   8'h28: c=8'h34;
    52              1                        405     	   8'h29: c=8'ha5;
    53              1                        388     	   8'h2a: c=8'he5;
    54              1                        348     	   8'h2b: c=8'hf1;
    55              1                        377     	   8'h2c: c=8'h71;
    56              1                        365     	   8'h2d: c=8'hd8;
    57              1                        358     	   8'h2e: c=8'h31;
    58              1                        389     	   8'h2f: c=8'h15;
    59              1                        369     	   8'h30: c=8'h04;
    60              1                        388     	   8'h31: c=8'hc7;
    61              1                        362     	   8'h32: c=8'h23;
    62              1                        400     	   8'h33: c=8'hc3;
    63              1                        402     	   8'h34: c=8'h18;
    64              1                        329     	   8'h35: c=8'h96;
    65              1                        357     	   8'h36: c=8'h05;
    66              1                        374     	   8'h37: c=8'h9a;
    67              1                        373     	   8'h38: c=8'h07;
    68              1                        356     	   8'h39: c=8'h12;
    69              1                        360     	   8'h3a: c=8'h80;
    70              1                        379     	   8'h3b: c=8'he2;
    71              1                        374     	   8'h3c: c=8'heb;
    72              1                        373     	   8'h3d: c=8'h27;
    73              1                        361     	   8'h3e: c=8'hb2;
    74              1                        397     	   8'h3f: c=8'h75;
    75              1                        373     	   8'h40: c=8'h09;
    76              1                        367     	   8'h41: c=8'h83;
    77              1                        389     	   8'h42: c=8'h2c;
    78              1                        365     	   8'h43: c=8'h1a;
    79              1                        428     	   8'h44: c=8'h1b;
    80              1                        378     	   8'h45: c=8'h6e;
    81              1                        351     	   8'h46: c=8'h5a;
    82              1                        363     	   8'h47: c=8'ha0;
    83              1                        376     	   8'h48: c=8'h52;
    84              1                        351     	   8'h49: c=8'h3b;
    85              1                        368     	   8'h4a: c=8'hd6;
    86              1                        413     	   8'h4b: c=8'hb3;
    87              1                        391     	   8'h4c: c=8'h29;
    88              1                        335     	   8'h4d: c=8'he3;
    89              1                        367     	   8'h4e: c=8'h2f;
    90              1                        386     	   8'h4f: c=8'h84;
    91              1                        398     	   8'h50: c=8'h53;
    92              1                        386     	   8'h51: c=8'hd1;
    93              1                        383     	   8'h52: c=8'h00;
    94              1                        398     	   8'h53: c=8'hed;
    95              1                        385     	   8'h54: c=8'h20;
    96              1                        387     	   8'h55: c=8'hfc;
    97              1                        378     	   8'h56: c=8'hb1;
    98              1                        371     	   8'h57: c=8'h5b;
    99              1                        346     	   8'h58: c=8'h6a;
    100             1                        374     	   8'h59: c=8'hcb;
    101             1                        395     	   8'h5a: c=8'hbe;
    102             1                        401     	   8'h5b: c=8'h39;
    103             1                        427     	   8'h5c: c=8'h4a;
    104             1                        384     	   8'h5d: c=8'h4c;
    105             1                        353     	   8'h5e: c=8'h58;
    106             1                        386     	   8'h5f: c=8'hcf;
    107             1                        407     	   8'h60: c=8'hd0;
    108             1                        401     	   8'h61: c=8'hef;
    109             1                        408     	   8'h62: c=8'haa;
    110             1                        384     	   8'h63: c=8'hfb;
    111             1                        428     	   8'h64: c=8'h43;
    112             1                        376     	   8'h65: c=8'h4d;
    113             1                        385     	   8'h66: c=8'h33;
    114             1                        385     	   8'h67: c=8'h85;
    115             1                        382     	   8'h68: c=8'h45;
    116             1                        356     	   8'h69: c=8'hf9;
    117             1                        377     	   8'h6a: c=8'h02;
    118             1                        397     	   8'h6b: c=8'h7f;
    119             1                        408     	   8'h6c: c=8'h50;
    120             1                        386     	   8'h6d: c=8'h3c;
    121             1                        385     	   8'h6e: c=8'h9f;
    122             1                        400     	   8'h6f: c=8'ha8;
    123             1                        361     	   8'h70: c=8'h51;
    124             1                        410     	   8'h71: c=8'ha3;
    125             1                        377     	   8'h72: c=8'h40;
    126             1                        381     	   8'h73: c=8'h8f;
    127             1                        415     	   8'h74: c=8'h92;
    128             1                        398     	   8'h75: c=8'h9d;
    129             1                        390     	   8'h76: c=8'h38;
    130             1                        389     	   8'h77: c=8'hf5;
    131             1                        378     	   8'h78: c=8'hbc;
    132             1                        339     	   8'h79: c=8'hb6;
    133             1                        358     	   8'h7a: c=8'hda;
    134             1                        384     	   8'h7b: c=8'h21;
    135             1                        389     	   8'h7c: c=8'h10;
    136             1                        403     	   8'h7d: c=8'hff;
    137             1                        408     	   8'h7e: c=8'hf3;
    138             1                        405     	   8'h7f: c=8'hd2;
    139             1                        339     	   8'h80: c=8'hcd;
    140             1                        394     	   8'h81: c=8'h0c;
    141             1                        368     	   8'h82: c=8'h13;
    142             1                        389     	   8'h83: c=8'hec;
    143             1                        358     	   8'h84: c=8'h5f;
    144             1                        371     	   8'h85: c=8'h97;
    145             1                        417     	   8'h86: c=8'h44;
    146             1                        376     	   8'h87: c=8'h17;
    147             1                        418     	   8'h88: c=8'hc4;
    148             1                        388     	   8'h89: c=8'ha7;
    149             1                        378     	   8'h8a: c=8'h7e;
    150             1                        380     	   8'h8b: c=8'h3d;
    151             1                        384     	   8'h8c: c=8'h64;
    152             1                        390     	   8'h8d: c=8'h5d;
    153             1                        378     	   8'h8e: c=8'h19;
    154             1                        356     	   8'h8f: c=8'h73;
    155             1                        389     	   8'h90: c=8'h60;
    156             1                        364     	   8'h91: c=8'h81;
    157             1                        394     	   8'h92: c=8'h4f;
    158             1                        368     	   8'h93: c=8'hdc;
    159             1                        406     	   8'h94: c=8'h22;
    160             1                        426     	   8'h95: c=8'h2a;
    161             1                        366     	   8'h96: c=8'h90;
    162             1                        384     	   8'h97: c=8'h88;
    163             1                        372     	   8'h98: c=8'h46;
    164             1                        387     	   8'h99: c=8'hee;
    165             1                        393     	   8'h9a: c=8'hb8;
    166             1                        370     	   8'h9b: c=8'h14;
    167             1                        380     	   8'h9c: c=8'hde;
    168             1                        365     	   8'h9d: c=8'h5e;
    169             1                        345     	   8'h9e: c=8'h0b;
    170             1                        383     	   8'h9f: c=8'hdb;
    171             1                        399     	   8'ha0: c=8'he0;
    172             1                        396     	   8'ha1: c=8'h32;
    173             1                        383     	   8'ha2: c=8'h3a;
    174             1                        351     	   8'ha3: c=8'h0a;
    175             1                        354     	   8'ha4: c=8'h49;
    176             1                        403     	   8'ha5: c=8'h06;
    177             1                        413     	   8'ha6: c=8'h24;
    178             1                        381     	   8'ha7: c=8'h5c;
    179             1                        353     	   8'ha8: c=8'hc2;
    180             1                        381     	   8'ha9: c=8'hd3;
    181             1                        382     	   8'haa: c=8'hac;
    182             1                        389     	   8'hab: c=8'h62;
    183             1                        391     	   8'hac: c=8'h91;
    184             1                        395     	   8'had: c=8'h95;
    185             1                        377     	   8'hae: c=8'he4;
    186             1                        391     	   8'haf: c=8'h79;
    187             1                        430     	   8'hb0: c=8'he7;
    188             1                        342     	   8'hb1: c=8'hc8;
    189             1                        398     	   8'hb2: c=8'h37;
    190             1                        373     	   8'hb3: c=8'h6d;
    191             1                        374     	   8'hb4: c=8'h8d;
    192             1                        411     	   8'hb5: c=8'hd5;
    193             1                        367     	   8'hb6: c=8'h4e;
    194             1                        348     	   8'hb7: c=8'ha9;
    195             1                        375     	   8'hb8: c=8'h6c;
    196             1                        349     	   8'hb9: c=8'h56;
    197             1                        364     	   8'hba: c=8'hf4;
    198             1                        370     	   8'hbb: c=8'hea;
    199             1                        383     	   8'hbc: c=8'h65;
    200             1                        403     	   8'hbd: c=8'h7a;
    201             1                        355     	   8'hbe: c=8'hae;
    202             1                        401     	   8'hbf: c=8'h08;
    203             1                        374     	   8'hc0: c=8'hba;
    204             1                        393     	   8'hc1: c=8'h78;
    205             1                        390     	   8'hc2: c=8'h25;
    206             1                        333     	   8'hc3: c=8'h2e;
    207             1                        396     	   8'hc4: c=8'h1c;
    208             1                        382     	   8'hc5: c=8'ha6;
    209             1                        375     	   8'hc6: c=8'hb4;
    210             1                        363     	   8'hc7: c=8'hc6;
    211             1                        393     	   8'hc8: c=8'he8;
    212             1                        392     	   8'hc9: c=8'hdd;
    213             1                        345     	   8'hca: c=8'h74;
    214             1                        368     	   8'hcb: c=8'h1f;
    215             1                        379     	   8'hcc: c=8'h4b;
    216             1                        357     	   8'hcd: c=8'hbd;
    217             1                        386     	   8'hce: c=8'h8b;
    218             1                        403     	   8'hcf: c=8'h8a;
    219             1                        390     	   8'hd0: c=8'h70;
    220             1                        419     	   8'hd1: c=8'h3e;
    221             1                        397     	   8'hd2: c=8'hb5;
    222             1                        394     	   8'hd3: c=8'h66;
    223             1                        403     	   8'hd4: c=8'h48;
    224             1                        356     	   8'hd5: c=8'h03;
    225             1                        421     	   8'hd6: c=8'hf6;
    226             1                        334     	   8'hd7: c=8'h0e;
    227             1                        350     	   8'hd8: c=8'h61;
    228             1                        382     	   8'hd9: c=8'h35;
    229             1                        387     	   8'hda: c=8'h57;
    230             1                        379     	   8'hdb: c=8'hb9;
    231             1                        401     	   8'hdc: c=8'h86;
    232             1                        379     	   8'hdd: c=8'hc1;
    233             1                        367     	   8'hde: c=8'h1d;
    234             1                        363     	   8'hdf: c=8'h9e;
    235             1                        371     	   8'he0: c=8'he1;
    236             1                        391     	   8'he1: c=8'hf8;
    237             1                        398     	   8'he2: c=8'h98;
    238             1                        362     	   8'he3: c=8'h11;
    239             1                        379     	   8'he4: c=8'h69;
    240             1                        371     	   8'he5: c=8'hd9;
    241             1                        398     	   8'he6: c=8'h8e;
    242             1                        357     	   8'he7: c=8'h94;
    243             1                        354     	   8'he8: c=8'h9b;
    244             1                        410     	   8'he9: c=8'h1e;
    245             1                        404     	   8'hea: c=8'h87;
    246             1                        348     	   8'heb: c=8'he9;
    247             1                        418     	   8'hec: c=8'hce;
    248             1                        378     	   8'hed: c=8'h55;
    249             1                        388     	   8'hee: c=8'h28;
    250             1                        370     	   8'hef: c=8'hdf;
    251             1                        403     	   8'hf0: c=8'h8c;
    252             1                        401     	   8'hf1: c=8'ha1;
    253             1                        360     	   8'hf2: c=8'h89;
    254             1                        365     	   8'hf3: c=8'h0d;
    255             1                        417     	   8'hf4: c=8'hbf;
    256             1                        376     	   8'hf5: c=8'he6;
    257             1                        387     	   8'hf6: c=8'h42;
    258             1                        391     	   8'hf7: c=8'h68;
    259             1                        378     	   8'hf8: c=8'h41;
    260             1                        376     	   8'hf9: c=8'h99;
    261             1                        429     	   8'hfa: c=8'h2d;
    262             1                        354     	   8'hfb: c=8'h0f;
    263             1                        369     	   8'hfc: c=8'hb0;
    264             1                        354     	   8'hfd: c=8'h54;
    265             1                        373     	   8'hfe: c=8'hbb;
    266             1                        365     	   8'hff: c=8'h16;
                                         ***0***     All False Count
Branch totals: 256 hits of 257 branches = 99.61%


Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                     32        32         0    100.00

================================Toggle Details================================

Toggle Coverage for File sbox.v --

       Line                                   Node      1H->0L      0L->1H  "Coverage"
--------------------------------------------------------------------------------------

Total Node Count     =         16 
Toggled Node Count   =         16 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (32 of 32 bins)

=================================================================================
=== File: tb.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            5         5         0    100.00

================================Statement Details================================

Statement Coverage for file tb.sv --

    1                                                
    2                                                
    3                                                `include "uvm_macros.svh"
    4                                                `include "my_vif.sv"
    5                                                `include "design.sv"
    6                                                import uvm_pkg::*;
    7                                                
    8                                                module top;
    9                                                  bit clk ;
    10              1                        221       always #5 clk= ~clk;
    10              2                        220     
    11                                                 import pack1::*;
    12                                               
    13                                                 intf in1 (clk);
    14                                                 
    15                                                 AES  aes_inst (.clk(in1.clk) ,.reset(in1.reset),.valid_in(in1.valid_in),.cipher_key(in1.cipher_key),.plain_text(in1.plain_text),.cipher_text(in1.cipher_text),.valid_out(in1.valid_out));
    16                                                 
    17                                                 initial 
    18                                                   begin
    19              1                          1          clk=0;
    20              1                          1           uvm_config_db#(virtual intf)::set(null, "uvm_test_top", "my_vif", in1);
    21              1                          1           run_test("my_test");
    22                                                   end
    23                                               endmodule

Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                      2         2         0    100.00

================================Toggle Details================================

Toggle Coverage for File tb.sv --

       Line                                   Node      1H->0L      0L->1H  "Coverage"
--------------------------------------------------------------------------------------

Total Node Count     =          1 
Toggled Node Count   =          1 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (2 of 2 bins)

COVERGROUP COVERAGE:
-----------------------------------------------------------------------------------------------
Covergroup                                             Metric       Goal    Status               
                                                                                              
-----------------------------------------------------------------------------------------------
 TYPE /pack1/my_subscriber/group_1                     62.43%        100    Uncovered            
    covered/total bins:                                    12         69                      
    missing/total bins:                                    57         69                      
    % Hit:                                             17.39%        100                      
    Coverpoint group_1::plain_text                     33.33%        100    Uncovered            
        covered/total bins:                                 1          3                      
        missing/total bins:                                 2          3                      
        % Hit:                                         33.33%        100                      
        bin in1_low                                         0          1    ZERO                 
        bin in2_high                                        0          1    ZERO                 
        bin in3_mid                                       109          1    Covered              
    Coverpoint group_1::cipher_key                     33.33%        100    Uncovered            
        covered/total bins:                                 1          3                      
        missing/total bins:                                 2          3                      
        % Hit:                                         33.33%        100                      
        bin key_in1_L                                       0          1    ZERO                 
        bin key_in2_H                                       0          1    ZERO                 
        bin key_in3_M                                     109          1    Covered              
    Coverpoint group_1::reset                         100.00%        100    Covered              
        covered/total bins:                                 2          2                      
        missing/total bins:                                 0          2                      
        % Hit:                                        100.00%        100                      
        bin reset_L                                        10          1    Covered              
        bin reset_H                                        99          1    Covered              
    Coverpoint group_1::valid_in                      100.00%        100    Covered              
        covered/total bins:                                 2          2                      
        missing/total bins:                                 0          2                      
        % Hit:                                        100.00%        100                      
        bin valid_L                                        10          1    Covered              
        bin valid_H                                        99          1    Covered              
    Coverpoint group_1::valid_out                     100.00%        100    Covered              
        covered/total bins:                                 2          2                      
        missing/total bins:                                 0          2                      
        % Hit:                                        100.00%        100                      
        bin validO_L                                       10          1    Covered              
        bin validO_H                                       99          1    Covered              
    Coverpoint group_1::cipher_text                    66.66%        100    Uncovered            
        covered/total bins:                                 2          3                      
        missing/total bins:                                 1          3                      
        % Hit:                                         66.66%        100                      
        bin key_in1_L                                      10          1    Covered              
        bin key_in2_H                                       0          1    ZERO                 
        bin key_in3_M                                      99          1    Covered              
    Cross group_1::cross1                               3.70%        100    Uncovered            
        covered/total bins:                                 2         54                      
        missing/total bins:                                52         54                      
        % Hit:                                          3.70%        100                      
        bin <key_in3_M,in3_mid,key_in1_L,valid_L>          10          1    Covered              
        bin <key_in3_M,in3_mid,key_in3_M,valid_H>          99          1    Covered              
        bin <key_in1_L,in1_low,key_in1_L,valid_L>           0          1    ZERO                 
        bin <key_in2_H,in1_low,key_in1_L,valid_L>           0          1    ZERO                 
        bin <key_in3_M,in1_low,key_in1_L,valid_L>           0          1    ZERO                 
        bin <key_in1_L,in2_high,key_in1_L,valid_L>          0          1    ZERO                 
        bin <key_in2_H,in2_high,key_in1_L,valid_L>          0          1    ZERO                 
        bin <key_in3_M,in2_high,key_in1_L,valid_L>          0          1    ZERO                 
        bin <key_in1_L,in3_mid,key_in1_L,valid_L>           0          1    ZERO                 
        bin <key_in2_H,in3_mid,key_in1_L,valid_L>           0          1    ZERO                 
        bin <key_in1_L,in1_low,key_in2_H,valid_L>           0          1    ZERO                 
        bin <key_in2_H,in1_low,key_in2_H,valid_L>           0          1    ZERO                 
        bin <key_in3_M,in1_low,key_in2_H,valid_L>           0          1    ZERO                 
        bin <key_in1_L,in2_high,key_in2_H,valid_L>          0          1    ZERO                 
        bin <key_in2_H,in2_high,key_in2_H,valid_L>          0          1    ZERO                 
        bin <key_in3_M,in2_high,key_in2_H,valid_L>          0          1    ZERO                 
        bin <key_in1_L,in3_mid,key_in2_H,valid_L>           0          1    ZERO                 
        bin <key_in2_H,in3_mid,key_in2_H,valid_L>           0          1    ZERO                 
        bin <key_in3_M,in3_mid,key_in2_H,valid_L>           0          1    ZERO                 
        bin <key_in1_L,in1_low,key_in3_M,valid_L>           0          1    ZERO                 
        bin <key_in2_H,in1_low,key_in3_M,valid_L>           0          1    ZERO                 
        bin <key_in3_M,in1_low,key_in3_M,valid_L>           0          1    ZERO                 
        bin <key_in1_L,in2_high,key_in3_M,valid_L>          0          1    ZERO                 
        bin <key_in2_H,in2_high,key_in3_M,valid_L>          0          1    ZERO                 
        bin <key_in3_M,in2_high,key_in3_M,valid_L>          0          1    ZERO                 
        bin <key_in1_L,in3_mid,key_in3_M,valid_L>           0          1    ZERO                 
        bin <key_in2_H,in3_mid,key_in3_M,valid_L>           0          1    ZERO                 
        bin <key_in3_M,in3_mid,key_in3_M,valid_L>           0          1    ZERO                 
        bin <key_in1_L,in1_low,key_in1_L,valid_H>           0          1    ZERO                 
        bin <key_in2_H,in1_low,key_in1_L,valid_H>           0          1    ZERO                 
        bin <key_in3_M,in1_low,key_in1_L,valid_H>           0          1    ZERO                 
        bin <key_in1_L,in2_high,key_in1_L,valid_H>          0          1    ZERO                 
        bin <key_in2_H,in2_high,key_in1_L,valid_H>          0          1    ZERO                 
        bin <key_in3_M,in2_high,key_in1_L,valid_H>          0          1    ZERO                 
        bin <key_in1_L,in3_mid,key_in1_L,valid_H>           0          1    ZERO                 
        bin <key_in2_H,in3_mid,key_in1_L,valid_H>           0          1    ZERO                 
        bin <key_in3_M,in3_mid,key_in1_L,valid_H>           0          1    ZERO                 
        bin <key_in1_L,in1_low,key_in2_H,valid_H>           0          1    ZERO                 
        bin <key_in2_H,in1_low,key_in2_H,valid_H>           0          1    ZERO                 
        bin <key_in3_M,in1_low,key_in2_H,valid_H>           0          1    ZERO                 
        bin <key_in1_L,in2_high,key_in2_H,valid_H>          0          1    ZERO                 
        bin <key_in2_H,in2_high,key_in2_H,valid_H>          0          1    ZERO                 
        bin <key_in3_M,in2_high,key_in2_H,valid_H>          0          1    ZERO                 
        bin <key_in1_L,in3_mid,key_in2_H,valid_H>           0          1    ZERO                 
        bin <key_in2_H,in3_mid,key_in2_H,valid_H>           0          1    ZERO                 
        bin <key_in3_M,in3_mid,key_in2_H,valid_H>           0          1    ZERO                 
        bin <key_in1_L,in1_low,key_in3_M,valid_H>           0          1    ZERO                 
        bin <key_in2_H,in1_low,key_in3_M,valid_H>           0          1    ZERO                 
        bin <key_in3_M,in1_low,key_in3_M,valid_H>           0          1    ZERO                 
        bin <key_in1_L,in2_high,key_in3_M,valid_H>          0          1    ZERO                 
        bin <key_in2_H,in2_high,key_in3_M,valid_H>          0          1    ZERO                 
        bin <key_in3_M,in2_high,key_in3_M,valid_H>          0          1    ZERO                 
        bin <key_in1_L,in3_mid,key_in3_M,valid_H>           0          1    ZERO                 
        bin <key_in2_H,in3_mid,key_in3_M,valid_H>           0          1    ZERO                 

TOTAL COVERGROUP COVERAGE: 62.43%  COVERGROUP TYPES: 1

Total Coverage By File (code coverage only, filtered view): 75.27%

